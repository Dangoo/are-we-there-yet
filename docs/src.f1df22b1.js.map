{"version":3,"sources":["../src/js/Components/FlipClock.js","../src/js/Helpers/Functions.js","../src/js/Components/Component.js","../src/js/Helpers/Digitize.js","../src/js/Helpers/Value.js","../src/js/Components/FaceValue.js","../src/js/Helpers/Validate.js","../src/js/Config/ConsoleMessages.js","../src/js/Components/Face.js","../src/js/Languages/ar-ar.js","../src/js/Languages/ca-es.js","../src/js/Languages/cs-cz.js","../src/js/Languages/da-dk.js","../src/js/Languages/de-de.js","../src/js/Languages/en-us.js","../src/js/Languages/es-es.js","../src/js/Languages/fa-ir.js","../src/js/Languages/fi-fi.js","../src/js/Languages/fr-ca.js","../src/js/Languages/he-il.js","../src/js/Languages/hu-hu.js","../src/js/Languages/it-it.js","../src/js/Languages/ja-jp.js","../src/js/Languages/ko-kr.js","../src/js/Languages/lv-lv.js","../src/js/Languages/nl-be.js","../src/js/Languages/no-nb.js","../src/js/Languages/pl-pl.js","../src/js/Languages/pt-br.js","../src/js/Languages/ro-ro.js","../src/js/Languages/ru-ru.js","../src/js/Languages/sk-sk.js","../src/js/Languages/sv-se.js","../src/js/Languages/th-th.js","../src/js/Languages/tr-tr.js","../src/js/Languages/ua-ua.js","../src/js/Languages/vn-vn.js","../src/js/Languages/zh-cn.js","../src/js/Languages/zh-tw.js","../src/js/Helpers/Language.js","../src/js/Helpers/Template.js","../src/js/Components/DomComponent.js","../src/js/Helpers/Translate.js","../src/js/Components/Divider.js","../src/js/Components/ListItem.js","../src/js/Components/List.js","../src/js/Components/Group.js","../src/js/Components/Label.js","../src/js/Components/Timer.js","../src/js/Faces/Counter.js","../src/js/Faces/MinuteCounter.js","../src/js/Faces/HourCounter.js","../src/js/Faces/DayCounter.js","../src/js/Faces/TwentyFourHourClock.js","../src/js/Faces/TwelveHourClock.js","../src/js/Faces/WeekCounter.js","../src/js/Faces/YearCounter.js","../src/js/Themes/Original/FlipClock.js","../src/js/Themes/Original/Faces/TwentyFourHourClock.js","../src/js/Config/DefaultValues.js","../src/js/Themes/Original/index.js","../src/js/Themes/Original/Divider.js","../src/js/Themes/Original/Group.js","../src/js/Themes/Original/Label.js","../src/js/Themes/Original/List.js","../src/js/Themes/Original/ListItem.js","../src/js/Themes/Original/Faces/DayCounter.js","../src/js/Themes/Original/Faces/HourCounter.js","../src/js/Themes/Original/Faces/MinuteCounter.js","../src/js/Themes/Original/Faces/TwelveHourClock.js","../src/js/Themes/Original/Faces/WeekCounter.js","../src/js/Themes/Original/Faces/YearCounter.js","index.js"],"names":["DomComponent","error","string","Error","callback","fn","isFunction","args","call","round","value","isNegativeZero","isNegative","Math","ceil","floor","toString","noop","isUndefined","isNull","concatMap","x","map","reduce","y","concat","flatten","deepFlatten","Array","isArray","Infinity","isString","isObject","type","Function","isNumber","isNaN","Component","attributes","setAttribute","Object","assign","events","key","forEach","event","apply","push","filter","before","after","off","on","hasOwnProperty","getOwnPropertyNames","getAttribute","keys","getAttributes","match","obj","setAttributes","values","i","constructor","defineName","$events","digitize","options","digits","minimumDigits","prependLeadingZero","arr","min","length","unshift","number","prepend","split","RANGES","max","format","parseFloat","stringFromCharCodeBy","char","String","fromCharCode","code","charCodeAt","findRange","FaceValue","getPublicAttributes","$digits","$value","validate","success","arg","name","isConstructor","className","items","theme","language","date","face","element","faceValue","timer","Face","undefined","autoStart","countdown","animationRate","defaultAttributes","defaultValue","instance","decrement","increment","shouldStop","stop","emit","stopAt","amount","isStopped","window","requestAnimationFrame","start","make","defaultDataType","createFaceValue","$stopAt","$originalValue","LANGUAGES","toLowerCase","find","aliases","indexOf","appendChildren","el","children","child","HTMLElement","appendChild","createElement","document","innerHTML","parent","translate","from","lang","dictionary","subject","existing","parentNode","replaceChild","render","insertBefore","kebabCase","replace","$el","ConsoleMessages","$parent","$theme","$language","Divider","ListItem","List","item","$items","Group","Label","label","Timer","interval","count","handle","started","running","Date","lastLoop","now","loop","isRunning","setTimeout","cancelAnimationFrame","getTime","Counter","MinuteCounter","showSeconds","showLabels","diff","originalValue","getMinutes","getSeconds","a","b","getTotalSeconds","totalSeconds","abs","HourCounter","data","getHours","DayCounter","getDays","TwentyFourHourClock","groups","offset","TwelveHourClock","showMeridium","hours","meridium","WeekCounter","getWeeks","YearCounter","getYears","index","childNodes","createDivider","mount","createLabel","FlipClock","parts","group","groupEl","querySelectorAll","lists","listEl","listValue","querySelector","createList","domValue","delay","createGroup","t","beforeValue","range","join","next","classList","add","style","animationDelay","animationDuration","createListItem","active","faces","English","DefaultValues","mounted","rendered","stopped","reset","$face","Faces","initialized","$timer","clone","clock","clockFace","console","log"],"mappings":";;;AAcuCA,IAAAA,EAAAA,EAAAA,UAAAA,IAAAA,SAAAA,EAAAA,GAAAA,iBAAAA,SAAAA,oBAAAA,OAAAA,OAAAA,QAAAA,IAAAA,mBAAAA,GAAAA,EAAAA,IAAAA,EAAAA,GAAAA,EAAAA,UAAAA,IAAAA,CAAAA,KAAAA,WAAAA,aAAAA,SAAAA,EAAAA,GAAAA,OAAAA,EAAAA,mBAAAA,QAAAA,iBAAAA,OAAAA,SAAAA,SAAAA,GAAAA,cAAAA,GAAAA,SAAAA,GAAAA,OAAAA,GAAAA,mBAAAA,QAAAA,EAAAA,cAAAA,QAAAA,IAAAA,OAAAA,UAAAA,gBAAAA,IAAAA,GAAAA,SAAAA,EAAAA,EAAAA,GAAAA,KAAAA,aAAAA,GAAAA,MAAAA,IAAAA,UAAAA,qCAAAA,SAAAA,EAAAA,EAAAA,GAAAA,IAAAA,IAAAA,EAAAA,EAAAA,EAAAA,EAAAA,OAAAA,IAAAA,CAAAA,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,WAAAA,EAAAA,aAAAA,EAAAA,EAAAA,cAAAA,EAAAA,UAAAA,IAAAA,EAAAA,UAAAA,GAAAA,OAAAA,eAAAA,EAAAA,EAAAA,IAAAA,IAAAA,SAAAA,EAAAA,EAAAA,EAAAA,GAAAA,OAAAA,GAAAA,EAAAA,EAAAA,UAAAA,GAAAA,GAAAA,EAAAA,EAAAA,GAAAA,EAAAA,SAAAA,EAAAA,EAAAA,GAAAA,GAAAA,mBAAAA,GAAAA,OAAAA,EAAAA,MAAAA,IAAAA,UAAAA,sDAAAA,EAAAA,UAAAA,OAAAA,OAAAA,GAAAA,EAAAA,UAAAA,CAAAA,YAAAA,CAAAA,MAAAA,EAAAA,UAAAA,EAAAA,cAAAA,KAAAA,GAAAA,EAAAA,EAAAA,GAAAA,SAAAA,EAAAA,GAAAA,OAAAA,EAAAA,OAAAA,eAAAA,OAAAA,eAAAA,SAAAA,GAAAA,OAAAA,EAAAA,WAAAA,OAAAA,eAAAA,KAAAA,GAAAA,SAAAA,EAAAA,EAAAA,GAAAA,OAAAA,EAAAA,OAAAA,gBAAAA,SAAAA,EAAAA,GAAAA,OAAAA,EAAAA,UAAAA,EAAAA,IAAAA,EAAAA,GAAAA,SAAAA,EAAAA,EAAAA,EAAAA,GAAAA,OAAAA,EAAAA,WAAAA,GAAAA,oBAAAA,UAAAA,QAAAA,UAAAA,OAAAA,EAAAA,GAAAA,QAAAA,UAAAA,KAAAA,OAAAA,EAAAA,GAAAA,mBAAAA,MAAAA,OAAAA,EAAAA,IAAAA,OAAAA,KAAAA,UAAAA,SAAAA,KAAAA,QAAAA,UAAAA,KAAAA,GAAAA,gBAAAA,EAAAA,MAAAA,GAAAA,OAAAA,GAAAA,GAAAA,QAAAA,UAAAA,SAAAA,EAAAA,EAAAA,GAAAA,IAAAA,EAAAA,CAAAA,MAAAA,EAAAA,KAAAA,MAAAA,EAAAA,GAAAA,IAAAA,EAAAA,IAAAA,SAAAA,KAAAA,MAAAA,EAAAA,IAAAA,OAAAA,GAAAA,EAAAA,EAAAA,EAAAA,WAAAA,IAAAA,MAAAA,KAAAA,WAAAA,SAAAA,EAAAA,EAAAA,GAAAA,OAAAA,GAAAA,iBAAAA,GAAAA,mBAAAA,EAAAA,SAAAA,GAAAA,QAAAA,IAAAA,EAAAA,MAAAA,IAAAA,eAAAA,6DAAAA,OAAAA,EAAAA,CAAAA,GAAAA,EAAAA,SAAAA,EAAAA,EAAAA,EAAAA,GAAAA,OAAAA,EAAAA,oBAAAA,SAAAA,QAAAA,IAAAA,QAAAA,IAAAA,SAAAA,EAAAA,EAAAA,GAAAA,IAAAA,EAAAA,SAAAA,EAAAA,GAAAA,MAAAA,OAAAA,UAAAA,eAAAA,KAAAA,EAAAA,IAAAA,QAAAA,EAAAA,EAAAA,MAAAA,OAAAA,EAAAA,CAAAA,EAAAA,GAAAA,GAAAA,EAAAA,CAAAA,IAAAA,EAAAA,OAAAA,yBAAAA,EAAAA,GAAAA,OAAAA,EAAAA,IAAAA,EAAAA,IAAAA,KAAAA,GAAAA,EAAAA,SAAAA,EAAAA,EAAAA,GAAAA,GCGhC,SAASC,EAAMC,GACZC,MAAAA,MAAMD,GAaT,SAASE,EAASC,GAClBC,GAAAA,EAAWD,GAAK,CADSE,IAAAA,IAAAA,EAAAA,UAAAA,OAAAA,EACT,IAAA,MAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,IADSA,EACT,EAAA,GAAA,UAAA,GACRF,OAAAA,EAAGG,KAAHH,MAAAA,EAAQ,CAAA,MAASE,OAAAA,KAYzB,SAASE,EAAMC,GACXC,OAAAA,EACHD,EAgHD,SAAoBA,GAChBC,OAAAA,EAAeD,IAAUA,EAAQ,EAjH5BE,CAAWF,GAASG,KAAKC,KAAKJ,GAASG,KAAKE,MAAML,KACzD,IAAMA,GAAOM,WAAaN,EAW5B,SAASO,EAAKP,GACV,OAACQ,EAAYR,KAAWS,EAAOT,GAyBnC,SAASU,EAAUf,GACf,OAAA,SAAAgB,GACIA,OAAAA,EAAEC,IAAIjB,GAAIkB,OAAO,SAACF,EAAGG,GAAMH,OAAAA,EAAEI,OAAOD,IAAI,KAYhD,SAASE,EAAQhB,GACbU,OAAAA,EAAU,SAAAV,GAASA,OAAAA,GAAnBU,CAA0BV,GAW9B,SAASiB,EAAYN,GACjBD,OAAAA,EAAU,SAAAC,GAAKO,OAAAA,MAAMC,QAAQR,GAAKM,EAAaN,GAAKA,GAApDD,CAAuDC,GAmC3D,SAASV,EAAeD,GACpB,OAAA,EAAIG,KAAKJ,MAAMC,KAAYoB,EAAAA,EAuB/B,SAASX,EAAOT,GACZA,OAAU,OAAVA,EAWJ,SAASQ,EAAYR,GACjB,YAAiB,IAAVA,EAuBX,SAASqB,EAASrB,GACd,MAAiB,iBAAVA,EAWX,SAASmB,EAAQnB,GACbA,OAAAA,aAAiBkB,MAWrB,SAASI,EAAStB,GACfuB,IAAAA,EAAcvB,EAAAA,GACbA,OAAS,MAATA,IAAkBmB,EAAQnB,KACrB,UAARuB,GAA4B,YAARA,GAYrB,SAAS3B,EAAWI,GAChBA,OAAAA,aAAiBwB,SAWrB,SAASC,EAASzB,GACd,OAAC0B,MAAM1B,GCjQG2B,IAAAA,EFYkBrC,WEJvBsC,SAAAA,EAAAA,GAAY,EAAA,KAAA,GACfC,KAAAA,aAAaC,OAAOC,OAAO,CAC5BC,OAAQ,IACTJ,IFC4BtC,OAAAA,EAAAA,EAAAA,CAAAA,CAAAA,IAAAA,OEkC9B2C,MAAAA,SAAAA,GAAQpC,IAAM,IAAA,EAAA,KAANA,EAAAA,UAAAA,OAAAA,EAAM,IAAA,MAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,IAANA,EAAM,EAAA,GAAA,UAAA,GAOR,OANJ,KAAKmC,OAAOC,IACND,KAAAA,OAAOC,GAAKC,QAAQ,SAAAC,GACrBA,EAAMC,MAAM,EAAMvC,KAInB,OFzCwBP,CAAAA,IAAAA,KEqDhC2C,MAAAA,SAAAA,EAAKtC,GAOG,OANH,KAAKqC,OAAOC,KACPD,KAAAA,OAAOC,GAAO,IAGlBD,KAAAA,OAAOC,GAAKI,KAAK1C,GAEf,OF5DwBL,CAAAA,IAAAA,MEyE/B2C,MAAAA,SAAAA,EAAKtC,GAUE,OATJ,KAAKqC,OAAOC,IAAQtC,EACdqC,KAAAA,OAAOC,GAAO,KAAKD,OAAOC,GAAKK,OAAO,SAAAH,GAChCA,OAAAA,IAAUxC,IAIhBqC,KAAAA,OAAOC,GAAO,GAGhB,OFnFwB3C,CAAAA,IAAAA,OE6F9B2C,MAAAA,SAAAA,EAAKtC,GAAI,IDlCI4C,EAAQC,ECkCZ,EAAA,KAGH,ODrCOD,ECmCH5C,EDnCW6C,ECmCP,WAAM,OAAA,EAAKC,IAAIR,EAAKtC,IAAnCA,EDlCG,WAAM6C,OAAAA,EAAMD,MCoCR,KAAKG,GAAGT,EAAKtC,GAAI,KFhGOL,CAAAA,IAAAA,eEyGtB2C,MAAAA,SAAAA,GACF,OAAA,KAAKU,eAAeV,GAAO,KAAKA,GAAO,OF1Gf3C,CAAAA,IAAAA,gBEkHnB,MAAA,WAAA,IAAA,EAAA,KACNsC,EAAa,GAMZA,OAJPE,OAAOc,oBAAoB,MAAMV,QAAQ,SAAAD,GACrCL,EAAWK,GAAO,EAAKY,aAAaZ,KAGjCL,IFzHwBtC,CAAAA,IAAAA,sBEkIb,MAAA,WAAA,IAAA,EAAA,KACXwC,OAAAA,OAAOgB,KAAK,KAAKC,iBACnBT,OAAO,SAAAL,GACG,OAACA,EAAIe,MAAM,SAErBnC,OAAO,SAACoC,EAAKhB,GAEHgB,OADPA,EAAIhB,GAAO,EAAKY,aAAaZ,GACtBgB,GACR,MF1IwB3D,CAAAA,IAAAA,eEoJtB2C,MAAAA,SAAAA,EAAKjC,GACXsB,EAASW,GACHiB,KAAAA,cAAcjB,GAGdA,KAAAA,GAAOjC,IFzJeV,CAAAA,IAAAA,gBEmKrB6D,MAAAA,SAAAA,GACN,IAAA,IAAMC,KAAKD,EACNtB,KAAAA,aAAauB,EAAGD,EAAOC,MFrKD9D,CAAAA,IAAAA,WE+K1BK,MAAAA,SAAAA,GACED,OAAAA,EAASI,KAAK,KAAMH,KFhLIL,CAAAA,IAAAA,OEOxB,IAAA,WAKA,OAJF,KAAK+D,YAAYC,sBAAsB9B,UACxCjC,EAAM,qCAGH,KAAK8D,YAAYC,eFZOhE,CAAAA,IAAAA,SEoBtB,IAAA,WACF,OAAA,KAAKiE,SAAW,IAGhBvD,IAAAA,SAAAA,GACFuD,KAAAA,QAAUvD,KFzBgBV,CAAAA,CAAAA,IAAAA,OE0Ld,MAAA,WAANO,IAAAA,IAAAA,EAAAA,UAAAA,OAAAA,EAAM,IAAA,MAAA,GAAA,EAAA,EAAA,EAAA,EAAA,IAANA,EAAM,GAAA,UAAA,GACN,OAAA,EAAA,KAAQA,OF3LYP,EAAAA,GGGxB,SAASkE,EAASxD,EAAOyD,GAyB7BC,OAxBPD,EAAU3B,OAAOC,OAAO,CACpB4B,cAAe,EACfC,oBAAoB,GACrBH,GASMC,SAAOG,EAAKC,GACXC,IAAAA,EAAS9C,EAAY4C,GAAKE,OAE7BA,GAAAA,EAASD,EACJ,IAAA,IAAIV,EAAI,EAAGA,EAAIU,EAAMC,EAAQX,IAC7BS,EAAI,GAAGG,QAAQ,KAIhBH,OAAAA,EAGJH,CAAO1C,EAAQ,CAAChB,IAAQY,IAAI,SAAAqD,GACxBjD,OAAAA,EAAQC,EAAY,CAACgD,IAASrD,IAAI,SAAAqD,GAC9BC,OArBNA,SAAQD,GAIN,OAHmBR,EAAQG,oBACS,IAAvCK,EAAO3D,WAAW6D,MAAM,IAAIJ,OAEJ,IAAM,IAAIhD,OAAOkD,GAiBlCC,CAAQD,GAAQE,MAAM,SAEjCV,EAAQE,eAAiB,GCpCjC,IAAMS,EAAS,CAAC,CAEZN,IAAK,GACLO,IAAK,IACP,CAEEP,IAAK,GACLO,IAAK,IACP,CAEEP,IAAK,GACLO,IAAK,MAcT,SAASC,EAAO9E,EAAQ+B,GACbA,OAAAA,GACE,IAAA,SACMgD,OAAAA,WAAW/E,GAGnBA,OAAAA,EAsCX,SAASgF,EAAqBC,EAAM9E,GACzB+E,OAAAA,OAAOC,aACVhF,EAzBR,SAAmB8E,GACX,IAAA,IAAMrB,KAAKgB,EAAQ,CACbQ,IAAAA,EAAOH,EAAKnE,WAAWuE,WAAW,GAErCT,GAAAA,EAAOhB,GAAGU,KAAOc,GAAQR,EAAOhB,GAAGiB,KAAOO,EAClCR,OAAAA,EAAOhB,GAIf,OAAA,KAgBA0B,CAAUL,GAAOA,EAAKI,WAAW,KC5EvBE,IAAAA,ELSkBzF,SAAAA,GKGvBU,SAAAA,EAAAA,EAAO4B,GAAY,IAAA,EAAA,OAAA,EAAA,KAAA,IACrBE,EAAAA,EAAAA,KAAAA,EAAAA,GAAAA,KAAAA,KAAAA,OAAOC,OAAO,CAChBuC,OAAQ,SAAAtE,GAASA,OAAAA,GACjB4D,oBAAoB,EACpBD,cAAe,GAChB/B,MAEM5B,QACAA,EAAAA,MAAQA,GARU,ELHIV,OAAAA,EAAAA,EKTAqC,GLSArC,EAAAA,EAAAA,CAAAA,CAAAA,IAAAA,QAAAA,MAAAA,SAAAA,GAAAA,SAAAA,IAAAA,OAAAA,EAAAA,MAAAA,KAAAA,WAAAA,OAAAA,EAAAA,SAAAA,WAAAA,OAAAA,EAAAA,YAAAA,EAAAA,CKmD3B,WACGoC,OAAAA,MAAM,KAAK1B,ULpDaV,CAAAA,IAAAA,WK4DxB,MAAA,WACAmC,OAAAA,ML7DwBnC,CAAAA,IAAAA,QKyE7BU,MAAAA,SAAAA,EAAO4B,GACF,OAAA,IAAI,KAAKyB,YAAYrD,EAAO8B,OAAOC,OACtC,KAAKiD,sBAAuBpD,ML3EDtC,CAAAA,IAAAA,SKoBtB,IAAA,WACF,OAAA,KAAK2F,SAGLjF,IAAAA,SAAAA,GACFiF,KAAAA,QAAUjF,EACV2D,KAAAA,cAAgBxD,KAAKkE,IAAI,KAAKV,cJ+FpC,SAAgB3D,GACZiB,OAAAA,EAAYjB,GAAO+D,OIhG4BA,CAAO/D,ML1B1BV,CAAAA,IAAAA,QKkCvB,IAAA,WACD,OAAA,KAAK4F,QAGNlF,IAAAA,SAAAA,GACDkF,KAAAA,OAASlF,EACT0D,KAAAA,OAASF,EAAS,KAAKc,OAAOtE,GAAQ,CACvC2D,cAAe,KAAKA,cACpBC,mBAAoB,KAAKA,wBL1CEtE,CAAAA,CAAAA,IAAAA,aKoFf,MAAA,WACT,MAAA,gBLrFwBA,EAAAA,GMKxB,SAAS6F,EAASnF,GAAUH,IACnCuF,IAAAA,GAAU,EADyBvF,EAAAA,UAAAA,OAAAA,EAAM,IAAA,MAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,IAANA,EAAM,EAAA,GAAA,UAAA,GAYtCuF,OATPpE,EAAQnB,GAAMqC,QAAQ,SAAAmD,IACb5E,EAAOT,IAAUS,EAAO4E,IACxB/D,EAAS+D,IAASrF,aAAiBqF,GACnCzF,EAAWyF,KL0KjB,SAAuBrF,GAClBA,OAAAA,aAAiBwB,YAAexB,EAAMsF,KK3KjBC,CAAcF,KAAuB,IAAfA,EAAIrF,IAC9CqB,EAASgE,IAAS,EAAOrF,KAAUqF,KACpCD,GAAU,KAIXA,EC1BI,IAAA,EAAA,CACXI,UAAW,kCACXC,MAAO,uCACPC,MAAO,wCACPC,SAAU,kCACVC,KAAM,2CACNC,KAAM,gDACNC,QAAS,oDACTC,UAAW,qDACXC,MAAO,4DCRUC,ERQkB3G,SAAAA,GQIvBU,SAAAA,EAAAA,EAAO4B,GAAY,IAAA,EAAA,OAAA,EAAA,KAAA,GACtB5B,aAAiB+E,IAAczD,EAAStB,KACzC4B,EAAa5B,EACbA,OAAQkG,IAGZ,EAAA,EAAA,KAAA,EAAA,GAAA,KAAA,QAEKhD,cAAcpB,OAAOC,OAAO,CAC7BoE,WAAW,EACXC,WAAW,EACXC,cAAe,KAChB,EAAKC,oBAAqB1E,GAAc,MAExCnB,EAAOT,IAAUQ,EAAYR,MAC5BA,EAAQ,EAAKuG,gBAGdvG,IACMA,EAAAA,MAAQA,GAnBU,ERJIV,OAAAA,EAAAA,EQRLqC,GRQKrC,EAAAA,EAAAA,CAAAA,CAAAA,IAAAA,WQwF1BkH,MAAAA,SAAAA,EAAU7G,GAcR,OAbJ,KAAKyG,UACCK,KAAAA,UAAUD,GAGVE,KAAAA,UAAUF,GAGnB9G,EAASI,KAAK,KAAMH,GAEjB,KAAKgH,WAAWH,IACfA,EAASI,OAGN,KAAKC,KAAK,cRtGcvH,CAAAA,IAAAA,aQ+GxBkH,MAAAA,SAAAA,GACA,OAAChG,EAAY,KAAKsG,SAAU,KAAKA,SAAWN,EAASxG,MAAMA,QRhHnCV,CAAAA,IAAAA,SQ0H5BkH,MAAAA,SAAAA,EAAUxG,GACNA,OAAAA,IR3HwBV,CAAAA,IAAAA,eQmIpB,MAAA,cRnIoBA,CAAAA,IAAAA,oBQ4If,MAAA,cR5IeA,CAAAA,IAAAA,kBQqJjB,MAAA,cRrJiBA,CAAAA,IAAAA,YQiKzBkH,MAAAA,SAAAA,EAAUO,MRjKezH,CAAAA,IAAAA,YQ6KzBkH,MAAAA,SAAAA,EAAUO,MR7KezH,CAAAA,IAAAA,UQuL3BkH,MAAAA,SAAAA,MRvL2BlH,CAAAA,IAAAA,UQiM3BkH,MAAAA,SAAAA,MRjM2BlH,CAAAA,IAAAA,QQ2M7BkH,MAAAA,SAAAA,MR3M6BlH,CAAAA,IAAAA,cQqNvBkH,MAAAA,SAAAA,MRrNuBlH,CAAAA,IAAAA,WQ+N1BkH,MAAAA,SAAAA,MR/N0BlH,CAAAA,IAAAA,UQyO3BkH,MAAAA,SAAAA,GACD,KAAKL,WAAaK,EAASR,MAAMgB,WAChCC,OAAOC,sBAAsB,WAAMV,OAAAA,EAASW,MAAMX,OR3OvBlH,CAAAA,IAAAA,kBQuPnBkH,MAAAA,SAAAA,EAAUxG,GAAO,IAAA,EAAA,KACtB+E,OAAAA,EAAUqC,KACbxH,EAAWI,KAAWA,EAAMsF,KAAOtF,IAAUA,EAAO,CAChD2D,cAAe,KAAKA,cACpBW,OAAQ,SAAAtE,GAAS,OAAA,EAAKsE,OAAOkC,EAAUxG,QR3PhBV,CAAAA,IAAAA,WQgCpB,IAAA,WACJ,OAAA,KAAK+H,oBRjCmB/H,CAAAA,IAAAA,QQyCvB,IAAA,WACD,OAAA,KAAK4F,QAGNlF,IAAAA,SAAAA,GACDA,aAAiB+E,IAClB/E,EAAQ,KAAKsH,gBAAgBtH,IAG5BkF,KAAAA,OAASlF,IRlDiBV,CAAAA,IAAAA,SQ0DtB,IAAA,WACF,OAAA,KAAKiI,SAGLvH,IAAAA,SAAAA,GACFuH,KAAAA,QAAUvH,IR/DgBV,CAAAA,IAAAA,gBQuEf,IAAA,WACT,OAAA,KAAKkI,gBAGExH,IAAAA,SAAAA,GACTwH,KAAAA,eAAiBxH,MR5ESV,EAAAA,GAAAA,EAAAA,OAAAA,OAAAA,CAAAA,WSHb,CACV,MAAA,QACA,OAAA,OACA,KAAA,OACA,MAAA,QACA,QAAA,QACA,QAAA,STHuBA,QSWhB,CAAC,KAAM,QAAS,YTXAA,EAAAA,OAAAA,OAAAA,CAAAA,WUHb,CACZ,MAAA,OACC,OAAA,QACF,KAAA,OACC,MAAA,QACE,QAAA,SACA,QAAA,UVHuBA,QUWhB,CAAC,KAAM,QAAS,aVXAA,EAAAA,OAAAA,OAAAA,CAAAA,WWHb,CACV,MAAA,OACA,OAAA,SACA,KAAA,MACA,MAAA,SACA,QAAA,SACA,QAAA,WXHuBA,QWWhB,CAAC,KAAM,QAAS,KAAM,QAAS,WXXfA,EAAAA,OAAAA,OAAAA,CAAAA,WYHb,CACb,MAAA,KACA,OAAA,UACA,KAAA,OACA,MAAA,QACA,QAAA,WACA,QAAA,YZH0BA,QYWhB,CAAC,KAAM,QAAS,YZXAA,EAAAA,OAAAA,OAAAA,CAAAA,WaHb,CACb,MAAA,QACA,OAAA,SACA,KAAA,OACA,MAAA,UACA,QAAA,UACA,QAAA,YbH0BA,QaWhB,CAAC,KAAM,QAAS,YbXAA,EAAAA,OAAAA,OAAAA,CAAAA,WcHb,CACb,MAAA,QACA,OAAA,SACA,KAAA,OACA,MAAA,QACA,QAAA,UACA,QAAA,WdH0BA,QcWhB,CAAC,KAAM,QAAS,adXAA,EAAAA,OAAAA,OAAAA,CAAAA,WeHb,CACb,MAAA,OACA,OAAA,QACA,KAAA,OACA,MAAA,QACA,QAAA,UACA,QAAA,YfH0BA,QeWhB,CAAC,KAAM,QAAS,afXAA,EAAAA,OAAAA,OAAAA,CAAAA,WgBHb,CACb,MAAA,MACA,OAAA,MACA,KAAA,MACA,MAAA,OACA,QAAA,QACA,QAAA,ShBH0BA,QgBWhB,CAAC,KAAM,QAAS,ahBXAA,EAAAA,OAAAA,OAAAA,CAAAA,WiBHb,CACb,MAAA,SACA,OAAA,YACA,KAAA,SACA,MAAA,SACA,QAAA,YACA,QAAA,YjBH0BA,QiBWhB,CAAC,KAAM,QAAS,ajBXAA,EAAAA,OAAAA,OAAAA,CAAAA,WkBHb,CACV,MAAA,MACA,OAAA,OACA,KAAA,QACA,MAAA,SACA,QAAA,UACA,QAAA,YlBHuBA,QkBWhB,CAAC,KAAM,QAAS,YlBXAA,EAAAA,OAAAA,OAAAA,CAAAA,WmBHb,CACb,MAAA,OACA,OAAA,OACA,KAAA,OACA,MAAA,OACA,QAAA,OACA,QAAA,SnBH0BA,QmBWhB,CAAC,KAAM,QAAS,YnBXAA,EAAAA,OAAAA,OAAAA,CAAAA,WoBHb,CACb,MAAA,KACG,OAAA,QACA,KAAA,MACA,MAAA,MACA,QAAA,OACA,QAAA,apBHuBA,QoBWhB,CAAC,KAAM,QAAS,epBXAA,EAAAA,OAAAA,OAAAA,CAAAA,WqBHb,CACb,MAAA,OACA,OAAA,OACA,KAAA,SACA,MAAA,MACA,QAAA,SACA,QAAA,WrBH0BA,QqBWhB,CAAC,KAAM,QAAS,YrBXAA,EAAAA,OAAAA,OAAAA,CAAAA,WsBHb,CACb,MAAA,IACA,OAAA,IACA,KAAA,IACA,MAAA,IACA,QAAA,IACA,QAAA,KtBH0BA,QsBWhB,CAAC,KAAM,QAAS,ctBXAA,EAAAA,OAAAA,OAAAA,CAAAA,WuBHb,CACb,MAAA,IACA,OAAA,IACA,KAAA,IACA,MAAA,IACA,QAAA,IACA,QAAA,KvBH0BA,QuBWhB,CAAC,KAAM,QAAS,YvBXAA,EAAAA,OAAAA,OAAAA,CAAAA,WwBHb,CACV,MAAA,OACA,OAAA,SACA,KAAA,SACA,MAAA,UACA,QAAA,UACA,QAAA,YxBHuBA,QwBWhB,CAAC,KAAM,QAAS,axBXAA,EAAAA,OAAAA,OAAAA,CAAAA,WyBHb,CACV,MAAA,QACA,OAAA,UACA,KAAA,QACA,MAAA,OACA,QAAA,UACA,QAAA,YzBHuBA,QyBWhB,CAAC,KAAM,QAAS,WzBXAA,EAAAA,OAAAA,OAAAA,CAAAA,W0BHb,CACb,MAAA,KACA,OAAA,UACA,KAAA,QACA,MAAA,QACA,QAAA,WACA,QAAA,Y1BH0BA,Q0BWhB,CAAC,KAAM,KAAM,QAAS,e1BXNA,EAAAA,OAAAA,OAAAA,CAAAA,W2BHb,CACb,MAAA,MACA,OAAA,WACA,KAAA,MACA,MAAA,UACA,QAAA,SACA,QAAA,W3BH0BA,Q2BWhB,CAAC,KAAM,QAAS,Y3BXAA,EAAAA,OAAAA,OAAAA,CAAAA,W4BHb,CACb,MAAA,OACA,OAAA,QACA,KAAA,OACA,MAAA,QACA,QAAA,UACA,QAAA,Y5BH0BA,Q4BWhB,CAAC,KAAM,QAAS,gB5BXAA,GAAAA,OAAAA,OAAAA,CAAAA,W6BHb,CAChB,MAAA,MACC,OAAA,OACF,KAAA,OACC,MAAA,MACE,QAAA,SACA,QAAA,Y7BH2BA,Q6BWhB,CAAC,KAAM,QAAS,Y7BXAA,GAAAA,OAAAA,OAAAA,CAAAA,W8BHb,CACV,MAAA,MACA,OAAA,UACA,KAAA,OACA,MAAA,QACA,QAAA,QACA,QAAA,U9BHuBA,Q8BWhB,CAAC,KAAM,QAAS,a9BXAA,GAAAA,OAAAA,OAAAA,CAAAA,W+BHb,CACb,MAAA,OACA,OAAA,UACA,KAAA,MACA,MAAA,SACA,QAAA,SACA,QAAA,W/BH0BA,Q+BWhB,CAAC,KAAM,QAAS,Y/BXAA,GAAAA,OAAAA,OAAAA,CAAAA,WgCHb,CACb,MAAA,KACA,OAAA,UACA,KAAA,QACA,MAAA,SACA,QAAA,UACA,QAAA,YhCH0BA,QgCWhB,CAAC,KAAM,QAAS,ahCXAA,GAAAA,OAAAA,OAAAA,CAAAA,WiCHb,CACb,MAAA,KACA,OAAA,QACA,KAAA,MACA,MAAA,UACA,QAAA,OACA,QAAA,UjCH0BA,QiCWhB,CAAC,KAAM,QAAS,UjCXAA,GAAAA,OAAAA,OAAAA,CAAAA,WkCHb,CACb,MAAA,MACA,OAAA,KACA,KAAA,MACA,MAAA,OACA,QAAA,SACA,QAAA,UlCH0BA,QkCWhB,CAAC,KAAM,QAAS,alCXAA,GAAAA,OAAAA,OAAAA,CAAAA,WmCHb,CACV,MAAA,OACA,OAAA,SACA,KAAA,MACA,MAAA,SACA,QAAA,UACA,QAAA,WnCHuBA,QmCWhB,CAAC,KAAM,QAAS,anCXAA,GAAAA,OAAAA,OAAAA,CAAAA,WoCHb,CACb,MAAA,MACA,OAAA,QACA,KAAA,OACA,MAAA,MACA,QAAA,OACA,QAAA,QpCH0BA,QoCWhB,CAAC,KAAM,QAAS,gBpCXAA,GAAAA,OAAAA,OAAAA,CAAAA,WqCHb,CACb,MAAA,IACA,OAAA,IACA,KAAA,IACA,MAAA,IACA,QAAA,IACA,QAAA,KrCH0BA,QqCWhB,CAAC,KAAM,QAAS,arCXAA,GAAAA,OAAAA,OAAAA,CAAAA,WsCHb,CACb,MAAA,IACA,OAAA,IACA,KAAA,IACA,MAAA,IACA,QAAA,IACA,QAAA,KtCH0BA,QsCWhB,CAAC,WtCXeA,GAAAA,OAAAA,OAAAA,CAAAA,OAAAA,EAAAA,QAAAA,EAAAA,MAAAA,EAAAA,OAAAA,EAAAA,OAAAA,EAAAA,QAAAA,EAAAA,QAAAA,EAAAA,QAAAA,EAAAA,QAAAA,EAAAA,OAAAA,EAAAA,OAAAA,EAAAA,UAAAA,EAAAA,QAAAA,EAAAA,SAAAA,EAAAA,OAAAA,EAAAA,QAAAA,EAAAA,MAAAA,EAAAA,UAAAA,EAAAA,OAAAA,EAAAA,WAAAA,EAAAA,SAAAA,GAAAA,QAAAA,GAAAA,OAAAA,GAAAA,QAAAA,GAAAA,KAAAA,GAAAA,QAAAA,GAAAA,UAAAA,GAAAA,WAAAA,GAAAA,QAAAA,GAAAA,mBAAAA,KuCAxB,SAASqG,GAASL,GACtBA,OAAAA,EAAOmC,GAAUnC,EAAKoC,gBAAkB5F,OAAOqB,OAAOsE,IAAWE,KAAK,SAAA3H,GAClEA,OAAiC,IAAjCA,EAAM4H,QAAQC,QAAQvC,KAC5B,KC4CF,SAASwC,GAAeC,EAAIC,GAS3BD,OARJ5G,EAAQ6G,IACVA,EAAS1F,OAAO/B,GAAM2B,QAAQ,SAAA+F,GAC1BA,aAAiBC,aACnBH,EAAGI,YAAYF,KAKXF,EAcD,SAASK,GAAcL,EAAIC,EAAUpG,GAcpCmG,OAbFA,aAAcG,cAClBH,EAAKM,SAASD,cAAcL,IA7CvB,SAAuBA,EAAInG,GAC9BN,GAAAA,EAASM,GACP,IAAA,IAAMwB,KAAKxB,EACdmG,EAAGlG,aAAauB,EAAGxB,EAAWwB,IA6ChCF,CAAc6E,EAAIzG,EAAS0G,GAAYA,EAAWpG,GAE9CN,EAAS0G,IAAc7G,EAAQ6G,GAIlCF,GAAeC,EAAIC,GAHnBD,EAAGO,UAAYN,EAMTD,ECzFazI,IAAAA,GzCKkBA,SAAAA,GyCIvBsC,SAAAA,EAAAA,GAAY,IAAA,EAavB,GAbuB,EAAA,KAAA,IACdE,EAAAA,EAAAA,KAAAA,EAAAA,GAAAA,KAAAA,KAAAA,OAAOC,OAAO,CAChBwG,OAAQ,MACT3G,MAEM8D,OACLnG,EAAS,GAAA,OAAA,EAAK+F,KAAd,oCAGA,EAAKK,UACLpG,EAAS,GAAA,OAAA,EAAK+F,KAAd,wCAGN,EAAKI,MAAM,EAAKJ,MACJ,MAAA,IAAI7F,MACH,GAAA,OAAA,EAAK6F,KADZ,oDAdgB,OAAA,EzCJWhG,OAAAA,EAAAA,EyCLGqC,GzCKHrC,EAAAA,EAAAA,CAAAA,CAAAA,IAAAA,YyC6GzBE,MAAAA,SAAAA,GACCgJ,OC3GA,SAAmBhJ,EAAQiJ,GAChCC,IAAAA,EAAOrH,EAASoH,GAAQ9C,GAAS8C,GAAQA,EAExCE,OADYD,EAAKC,YAAcD,GACpBlJ,IAAWA,EDwGlBgJ,CAAUhJ,EAAQ,KAAKmG,YzC9GCrG,CAAAA,IAAAA,IyCsHjCE,MAAAA,SAAAA,GACS,OAAA,KAAKgJ,UAAUhJ,KzCvHSF,CAAAA,IAAAA,SyC+H7B,MAAA,WACIyI,IDzHOa,EAASC,ECyHhBd,EAAKK,GAAc,MAAO,CACrB,MAAmB,eAAnB,KAAK5C,UAA6B,KAAKA,UAAY,cAAgB,KAAKA,YAY5E,OATFE,KAAAA,MAAM,KAAKJ,MAAMyC,EAAI,MAEtB,KAAKA,GAGD,KAAKA,GAAGO,YAAcP,EAAGO,YACxBP,KAAAA,IDnIIa,ECmIMb,GDnIGc,ECmIC,KAAKd,IDlIvBe,YACXD,EAASC,WAAWC,aAAaH,EAASC,GAEnCD,GAGDC,ICyHSd,KAAAA,GAAKA,EAMP,KAAKA,KzC7ImBzI,CAAAA,IAAAA,QyCyJ7BiJ,MAAAA,SAAAA,GAAQhG,IAAAA,EAAS,UAAA,OAAA,QAAA,IAAA,UAAA,IAAA,UAAA,GAWZ,OAVFyG,KAAAA,SACAT,KAAAA,OAASA,EAEVhG,EAIKgG,KAAAA,OAAOU,aAAa,KAAKlB,GAAIxF,GAH7BgG,KAAAA,OAAOJ,YAAY,KAAKJ,IAM1B,KAAKA,KzCpKmBzI,CAAAA,IAAAA,YyC6BnB,IAAA,WACL4J,OAAU,KAAK7F,YAAYC,axCmOxB6F,QAAQ,kBAAmB,SAASA,QAAQ,OAAQ,KAAKzB,gBDjQpCpI,CAAAA,IAAAA,KyCsC1B,IAAA,WACE,OAAA,KAAK8J,KAGTpJ,IAAAA,SAAAA,GACCmF,EAASnF,EAAO,KAAMkI,cACtB3I,EAAM8J,EAAgBvD,SAGrBsD,KAAAA,IAAMpJ,IzC/CoBV,CAAAA,IAAAA,SyCwDtB,IAAA,WACF,OAAA,KAAKgK,SAGLf,IAAAA,SAAAA,GACFe,KAAAA,QAAUf,IzC7DgBjJ,CAAAA,IAAAA,QyCqEvB,IAAA,WACD,OAAA,KAAKiK,QAGNvJ,IAAAA,SAAAA,GACFmF,EAASnF,EAAO,WAChBT,EAAM8J,EAAgBrJ,OAGrBuJ,KAAAA,OAASvJ,IzC9EiBV,CAAAA,IAAAA,WyCsFpB,IAAA,WACJ,OAAA,KAAKkK,WAGHxJ,IAAAA,SAAAA,GACNqB,EAASrB,KACRA,EAAQ2F,GAAS3F,IAGjBmF,EAASnF,EAAO,WAChBT,EAAM8J,EAAgB1D,UAGrB6D,KAAAA,UAAYxJ,MzCnGcV,EAAAA,G2CDlBmK,G3CCkBnK,SAAAA,GAAAA,SAAAA,IAAAA,OAAAA,EAAAA,KAAAA,GAAAA,EAAAA,KAAAA,EAAAA,GAAAA,MAAAA,KAAAA,YAAAA,OAAAA,EAAAA,E2CDFA,I3CCEA,EAAAA,EAAAA,KAAAA,CAAAA,CAAAA,IAAAA,a2CMf,MAAA,WACT,MAAA,c3CPwBA,EAAAA,G4CXlBoK,G5CWkBpK,SAAAA,G4CDvBU,SAAAA,EAAAA,EAAO4B,GACTE,OADqB,EAAA,KAAA,GACrBA,EAAAA,KAAAA,EAAAA,GAAAA,KAAAA,KAAAA,OAAOC,OAAO,CAChB/B,MAAOA,GACRsB,EAAStB,GAASA,EAAQ,KAAM4B,K5CFJtC,OAAAA,EAAAA,E4CXDA,I5CWCA,EAAAA,EAAAA,KAAAA,CAAAA,CAAAA,IAAAA,a4CUf,MAAA,WACT,MAAA,e5CXwBA,EAAAA,G6CRlBqK,G7CQkBrK,SAAAA,G6CMvBU,SAAAA,EAAAA,EAAO4B,GACTE,OADqB,EAAA,KAAA,GACrBA,EAAAA,KAAAA,EAAAA,GAAAA,KAAAA,KAAAA,OAAOC,OAAO,CAChB/B,MAAOA,EACPyF,MAAO,IACRnE,EAAStB,GAASA,EAAQ,KAAM4B,K7CVJtC,OAAAA,EAAAA,E6CRLA,I7CQKA,EAAAA,EAAAA,CAAAA,CAAAA,IAAAA,iB6C6CpBU,MAAAA,SAAAA,EAAO4B,GACZgI,IAAAA,EAAO,IAAIF,GAAS1J,EAAO8B,OAAOC,OAAO,CAC3C2D,MAAO,KAAKA,MACZC,SAAU,KAAKA,UAChB/D,IAIIgI,OAFFC,KAAAA,OAAOxH,KAAKuH,GAEVA,I7CrDwBtK,CAAAA,IAAAA,Q6CkBvB,IAAA,WACD,OAAA,KAAK4F,QAENlF,IAAAA,SAAAA,GACDkF,KAAAA,OAASlF,I7CtBiBV,CAAAA,IAAAA,Q6C8BvB,IAAA,WACD,OAAA,KAAKuK,QAGN7J,IAAAA,SAAAA,GACD6J,KAAAA,OAAS7J,K7CnCiBV,CAAAA,CAAAA,IAAAA,a6C6Df,MAAA,WACT,MAAA,W7C9DwBA,EAAAA,G8CXlBwK,G9CWkBxK,SAAAA,G8CCvBmG,SAAAA,EAAAA,EAAO7D,GACTE,OADqB,EAAA,KAAA,GACrBA,EAAAA,KAAAA,EAAAA,GAAAA,KAAAA,KAAAA,OAAOC,OAAO,CAChB0D,MAAOtE,EAAQsE,GAASA,EAAQ,IAChCnE,EAASmE,GAASA,EAAQ,KAAO7D,K9CJNtC,OAAAA,EAAAA,E8CXJA,I9CWIA,EAAAA,EAAAA,KAAAA,CAAAA,CAAAA,IAAAA,a8CYf,MAAA,WACT,MAAA,Y9CbwBA,EAAAA,G+CXlByK,G/CWkBzK,SAAAA,G+CAvB0K,SAAAA,EAAAA,EAAOpI,GACTE,OADqB,EAAA,KAAA,GACrBA,EAAAA,KAAAA,EAAAA,GAAAA,KAAAA,KAAAA,OAAOC,OAAO,CAChBiI,MAAOA,GACP1I,EAAS0I,GAASA,EAAQ,KAAOpI,K/CHNtC,OAAAA,EAAAA,E+CXJA,I/CWIA,EAAAA,EAAAA,KAAAA,CAAAA,CAAAA,IAAAA,a+CWf,MAAA,WACT,MAAA,Y/CZwBA,EAAAA,GgDXlB2K,GhDWkB3K,SAAAA,GgDDvB4K,SAAAA,EAAAA,GACFpI,OADY,EAAA,KAAA,GACZA,EAAAA,KAAAA,EAAAA,GAAAA,KAAAA,KAAAA,OAAOC,OAAO,CAChBoI,MAAO,EACPC,OAAQ,KACRC,QAAS,KACTC,SAAS,EACTJ,SAAUzI,EAASyI,GAAYA,EAAW,MAC3C5I,EAAS4I,GAAYA,EAAW,QhDNJ5K,OAAAA,EAAAA,EgDXJqC,GhDWIrC,EAAAA,EAAAA,CAAAA,CAAAA,IAAAA,QgD4C7BK,MAAAA,SAAAA,GAAI,IAAA,EAAA,KAOC,OANFiH,KAAAA,KAAK,WACN,EAAKuD,MAAQ,EACb,EAAKhD,MAAM,WAAMzH,OAAAA,EAASI,KAAK,EAAMH,KACrC,EAAKkH,KAAK,WAGP,OhDnDwBvH,CAAAA,IAAAA,QgD4D7BK,MAAAA,SAAAA,GAAI,IAAA,EAAA,KACD0K,KAAAA,QAAU,IAAIE,KACdC,KAAAA,SAAWD,KAAKE,MAChBH,KAAAA,SAAU,EACVzD,KAAAA,KAAK,SAeH6D,OAbM,SAAPA,IAUK,OATJH,KAAKE,MAAQ,EAAKD,UAAY,EAAKN,WAClCxK,EAASI,KAAK,EAAMH,GACpB,EAAK6K,SAAWD,KAAKE,MACrB,EAAK5D,KAAK,YACV,EAAKsD,SAGT,EAAKC,OAASnD,OAAOC,sBAAsBwD,GAEpC,EAGJA,KhD/EwBpL,CAAAA,IAAAA,OgDwF9BK,MAAAA,SAAAA,GAAI,IAAA,EAAA,KAaE,OAZJ,KAAKgL,WACJC,WAAW,WACP3D,OAAO4D,qBAAqB,EAAKT,QAEjC,EAAKE,SAAU,EAEf5K,EAASI,KAAK,EAAMH,GAEpB,EAAKkH,KAAK,UAIX,OhDrGwBvH,CAAAA,IAAAA,UgDcrB,IAAA,WACH,OAAC,KAAKkL,SAAe,KAAKA,UAC7B,KAAKH,QAAU,KAAKA,QAAQS,WAAY,IAAIP,MAAOO,WAD/B,IhDfOxL,CAAAA,IAAAA,YgDyBnB,IAAA,WACL,OAAiB,IAAjB,KAAKgL,UhD1BmBhL,CAAAA,IAAAA,YgDkCnB,IAAA,WACL,OAAiB,IAAjB,KAAKgL,WhDnCmBhL,CAAAA,CAAAA,IAAAA,agD6Gf,MAAA,WACT,MAAA,YhD9GwBA,EAAAA,GiDHlByL,GjDGkBzL,SAAAA,GAAAA,SAAAA,IAAAA,OAAAA,EAAAA,KAAAA,GAAAA,EAAAA,KAAAA,EAAAA,GAAAA,MAAAA,KAAAA,YAAAA,OAAAA,EAAAA,EiDHF2G,GjDGE3G,EAAAA,EAAAA,CAAAA,CAAAA,IAAAA,YiDDzBkH,MAAAA,SAAAA,GAAUxG,IAAAA,EAAQ,UAAA,OAAA,QAAA,IAAA,UAAA,GAAA,UAAA,GAAA,EACxBwG,EAASxG,MAAQ,KAAKA,MAAMA,MAAQA,IjDALV,CAAAA,IAAAA,YiDGzBkH,MAAAA,SAAAA,GAAUxG,IAAAA,EAAQ,UAAA,OAAA,QAAA,IAAA,UAAA,GAAA,UAAA,GAAA,EACxBwG,EAASxG,MAAQ,KAAKA,MAAMA,MAAQA,KjDJLV,CAAAA,CAAAA,IAAAA,aiDYf,MAAA,WACT,MAAA,cjDbwBA,EAAAA,GkDFlB0L,GlDEkB1L,SAAAA,GAAAA,SAAAA,IAAAA,OAAAA,EAAAA,KAAAA,GAAAA,EAAAA,KAAAA,EAAAA,GAAAA,MAAAA,KAAAA,YAAAA,OAAAA,EAAAA,EkDFI2G,GlDEJ3G,EAAAA,EAAAA,CAAAA,CAAAA,IAAAA,kBkDAjB,MAAA,WACPiL,OAAAA,OlDDwBjL,CAAAA,IAAAA,oBkDIf,MAAA,WACT,MAAA,CACH2L,aAAa,EACbC,YAAY,KlDPe5L,CAAAA,IAAAA,akDWxBkH,MAAAA,SAAAA,GACJ/F,GAAAA,EAAO+F,EAASM,SAAWtG,EAAYgG,EAASM,QACxC,OAAA,EAGR,GAAA,KAAKA,kBAAkByD,KACf,OAAA,KAAKnE,UACR,KAAKU,OAAOgE,WAAa,KAAK9K,MAAMA,MAAM8K,UAC1C,KAAKhE,OAAOgE,WAAa,KAAK9K,MAAMA,MAAM8K,UAE7C,GAAGrJ,EAAS,KAAKqF,QAAS,CACrBqE,IAAAA,EAAOhL,KAAKE,OAAO,KAAKL,MAAMA,MAAM8K,UAAY,KAAKM,cAAcN,WAAa,KAE/E,OAAA,KAAK1E,UACR,KAAKU,QAAUqE,EACf,KAAKrE,QAAUqE,EAGjB,MAAA,IAAI1L,MAAV,gElD7B+BH,CAAAA,IAAAA,YkDgCzBkH,MAAAA,SAAAA,GAAUxG,IAAAA,EAAQ,UAAA,OAAA,QAAA,IAAA,UAAA,GAAA,UAAA,GAAA,EACxBwG,EAASxG,MAAQ,IAAIuK,KAAK,KAAKvK,MAAMA,MAAM8K,UAAY9K,IAAS,IAAIuK,MAAOO,UAAYtE,EAASR,MAAMwE,alDjCvElL,CAAAA,IAAAA,YkDoCzBkH,MAAAA,SAAAA,GAAUxG,IAAAA,EAAQ,UAAA,OAAA,QAAA,IAAA,UAAA,GAAA,UAAA,GAAA,EACxBwG,EAASxG,MAAQ,IAAIuK,KAAK,KAAKvK,MAAMA,MAAM8K,UAAY9K,IAAS,IAAIuK,MAAOO,UAAYtE,EAASR,MAAMwE,alDrCvElL,CAAAA,IAAAA,SkDwC5BkH,MAAAA,SAAAA,EAAUxG,GACPqK,IAAAA,EAAU7D,EAASR,MAAM2E,UAAYnE,EAASR,MAAMqE,QAAU,IAAIE,KAAKA,KAAKE,MAAQ,IAEnF,MAAA,CACH,CAAC,KAAKY,WAAWrL,EAAOqK,IACxB,KAAKY,YAAc,CAAC,KAAKK,WAAWtL,EAAOqK,IAAY,MACzD/H,OAAO/B,KlD9CsBjB,CAAAA,IAAAA,akDiDxBiM,MAAAA,SAAAA,EAAGC,GACHzL,OAAAA,EAAM,KAAK0L,gBAAgBF,EAAGC,GAAK,MlDlDXlM,CAAAA,IAAAA,akDqDxBiM,MAAAA,SAAAA,EAAGC,GACJE,IAAAA,EAAe,KAAKD,gBAAgBF,EAAGC,GAEtCrL,OAAAA,KAAKwL,IAAIxL,KAAKC,KAAsB,KAAjBsL,EAAsB,EAAIA,EAAe,OlDxDpCpM,CAAAA,IAAAA,kBkD2DnBiM,MAAAA,SAAAA,EAAGC,GACRD,OAAAA,EAAET,YAAcU,EAAEV,UAAY,EAAI3K,KAAKJ,OAAOwL,EAAET,UAAYU,EAAEV,WAAa,QlD5DnDxL,CAAAA,CAAAA,IAAAA,akDoEf,MAAA,WACT,MAAA,oBlDrEwBA,EAAAA,GmDHlBsM,GnDGkBtM,SAAAA,GAAAA,SAAAA,IAAAA,OAAAA,EAAAA,KAAAA,GAAAA,EAAAA,KAAAA,EAAAA,GAAAA,MAAAA,KAAAA,YAAAA,OAAAA,EAAAA,EmDHE0L,InDGF1L,EAAAA,EAAAA,CAAAA,CAAAA,IAAAA,SmDD5BkH,MAAAA,SAAAA,EAAUxG,GACPyK,IAAAA,EAAOjE,EAASR,MAAMqE,QAAqBrK,EAAX,IAAIuK,KACpCa,EAAgB5E,EAAS4E,eAAiBpL,EAC1CuL,EAAK,KAAKnF,UAAkBgF,EAANX,EACtBe,EAAK,KAAKpF,UAA4BqE,EAAhBW,EAEtBS,EAAO,CACT,CAAC,KAAKC,SAASP,EAAGC,IAClB,CAAC,KAAKH,WAAWE,EAAGC,KAOjBK,OAJJ,KAAKZ,aACJY,EAAKxJ,KAAK,CAAC,KAAKiJ,WAAWC,EAAGC,KAG3BK,InDdwBvM,CAAAA,IAAAA,amDiBxBiM,MAAAA,SAAAA,EAAGC,GACHrL,OAAAA,KAAKwL,IAAI,EAAiBJ,EAAAA,EAAAA,WAAAA,aAAAA,MAAAA,KAAAA,KAAAA,EAAGC,GAAK,MnDlBVlM,CAAAA,IAAAA,WmDqB1BiM,MAAAA,SAAAA,EAAGC,GACDrL,OAAAA,KAAKE,MAAM,KAAKoL,gBAAgBF,EAAGC,GAAK,GAAK,OnDtBrBlM,CAAAA,CAAAA,IAAAA,amD8Bf,MAAA,WACT,MAAA,kBnD/BwBA,EAAAA,GoDHlByM,GpDGkBzM,SAAAA,GAAAA,SAAAA,IAAAA,OAAAA,EAAAA,KAAAA,GAAAA,EAAAA,KAAAA,EAAAA,GAAAA,MAAAA,KAAAA,YAAAA,OAAAA,EAAAA,EoDHCsM,IpDGDtM,EAAAA,EAAAA,CAAAA,CAAAA,IAAAA,SoDD5BkH,MAAAA,SAAAA,EAAUxG,GACPyK,IAAAA,EAAOjE,EAAS6D,QAAqBrK,EAAX,IAAIuK,KAC9Ba,EAAgB5E,EAAS4E,eAAiBpL,EAC1CuL,EAAK,KAAKnF,UAAkBgF,EAANX,EACtBe,EAAK,KAAKpF,UAA4BqE,EAAhBW,EAEtBS,EAAO,CACT,CAAC,KAAKG,QAAQT,EAAGC,IACjB,CAAC,KAAKM,SAASP,EAAGC,IAClB,CAAC,KAAKH,WAAWE,EAAGC,KAOjBK,OAJJ,KAAKZ,aACJY,EAAKxJ,KAAK,CAAC,KAAKiJ,WAAWC,EAAGC,KAG3BK,IpDfwBvM,CAAAA,IAAAA,UoDkB3BiM,MAAAA,SAAAA,EAAGC,GACArL,OAAAA,KAAKE,MAAM,KAAKoL,gBAAgBF,EAAGC,GAAK,GAAK,GAAK,MpDnB1BlM,CAAAA,IAAAA,WoDsB1BiM,MAAAA,SAAAA,EAAGC,GACDrL,OAAAA,KAAKwL,IAAI,EAAeJ,EAAAA,EAAAA,WAAAA,WAAAA,MAAAA,KAAAA,KAAAA,EAAGC,GAAK,OpDvBRlM,CAAAA,CAAAA,IAAAA,aoD+Bf,MAAA,WACT,MAAA,iBpDhCwBA,EAAAA,GqDHlB2M,GrDGkB3M,SAAAA,GAAAA,SAAAA,IAAAA,OAAAA,EAAAA,KAAAA,GAAAA,EAAAA,KAAAA,EAAAA,GAAAA,MAAAA,KAAAA,YAAAA,OAAAA,EAAAA,EqDHU2G,GrDGV3G,EAAAA,EAAAA,CAAAA,CAAAA,IAAAA,kBqDDjB,MAAA,WACPiL,OAAAA,OrDAwBjL,CAAAA,IAAAA,eqDGpB,MAAA,WACJ,OAAA,IAAIiL,OrDJoBjL,CAAAA,IAAAA,oBqDOf,MAAA,WACT,MAAA,CACH2L,aAAa,EACbC,YAAY,KrDVe5L,CAAAA,IAAAA,SqDc5BkH,MAAAA,SAAAA,EAAUxG,GACTA,IACAA,EAAQ,IAAIuK,MAGV2B,IAAAA,EAAS,CACX,CAAClM,EAAM8L,YACP,CAAC9L,EAAMqL,eAOJa,OAJJ,KAAKjB,aACJiB,EAAO7J,KAAK,CAACrC,EAAMsL,eAGhBY,IrD5BwB5M,CAAAA,IAAAA,YqD+BzBkH,MAAAA,SAAAA,GAAU2F,IAAAA,EAAS,UAAA,OAAA,QAAA,IAAA,UAAA,GAAA,UAAA,GAAA,EACzB3F,EAASxG,MAAQ,IAAIuK,KAAK,KAAKvK,MAAMA,MAAM8K,UAAYqB,IAAU,IAAI5B,MAAOO,UAAYtE,EAASR,MAAMwE,arDhCxElL,CAAAA,IAAAA,YqDmCzBkH,MAAAA,SAAAA,GAAU2F,IAAAA,EAAS,UAAA,OAAA,QAAA,IAAA,UAAA,GAAA,UAAA,GAAA,EACzB3F,EAASxG,MAAQ,IAAIuK,KAAK,KAAKvK,MAAMA,MAAM8K,UAAYqB,IAAU,IAAI5B,MAAOO,UAAYtE,EAASR,MAAMwE,crDpCxElL,CAAAA,CAAAA,IAAAA,aqD4Cf,MAAA,WACT,MAAA,0BrD7CwBA,EAAAA,GsDHlB8M,GtDGkB9M,SAAAA,GAAAA,SAAAA,IAAAA,OAAAA,EAAAA,KAAAA,GAAAA,EAAAA,KAAAA,EAAAA,GAAAA,MAAAA,KAAAA,YAAAA,OAAAA,EAAAA,EsDHM2M,ItDGN3M,EAAAA,EAAAA,CAAAA,CAAAA,IAAAA,oBsDDf,MAAA,WACT,MAAA,CACH4L,YAAY,EACZD,aAAa,EACboB,cAAc,KtDHa/M,CAAAA,IAAAA,SsDO5BkH,MAAAA,SAAAA,EAAUxG,GACTA,IACAA,EAAQ,IAAIuK,MAGV+B,IAAAA,EAAQtM,EAAM8L,WACpBI,EAAS,CACdI,EAAQ,GAAKA,EAAQ,GAAgB,IAAVA,EAAc,GAAKA,EAC9CtM,EAAMqL,cASAa,OANIK,KAAAA,SAAWD,EAAQ,GAAK,KAAO,KAEvC,KAAKrB,aACPiB,EAAO7J,KAAKrC,EAAMsL,cAGZY,KtDxB8B5M,CAAAA,CAAAA,IAAAA,asDgCf,MAAA,WACT,MAAA,sBtDjCwBA,EAAAA,GuDHlBkN,GvDGkBlN,SAAAA,GAAAA,SAAAA,IAAAA,OAAAA,EAAAA,KAAAA,GAAAA,EAAAA,KAAAA,EAAAA,GAAAA,MAAAA,KAAAA,YAAAA,OAAAA,EAAAA,EuDHEyM,IvDGFzM,EAAAA,EAAAA,CAAAA,CAAAA,IAAAA,SuDD5BkH,MAAAA,SAAAA,EAAUxG,GACPyK,IAAAA,EAAOjE,EAASR,MAAMqE,QAAqBrK,EAAX,IAAIuK,KACpCa,EAAgB5E,EAAS4E,eAAiBpL,EAC1CuL,EAAK,KAAKnF,UAAkBgF,EAANX,EACtBe,EAAK,KAAKpF,UAA4BqE,EAAhBW,EAEtBS,EAAO,CACT,CAAC,KAAKY,SAASlB,EAAGC,IAClB,CAAC,KAAKQ,QAAQT,EAAGC,IACjB,CAAC,KAAKM,SAASP,EAAGC,IAClB,CAAC,KAAKH,WAAWE,EAAGC,KAOjBK,OAJJ,KAAKZ,aACJY,EAAKxJ,KAAK,CAAC,KAAKiJ,WAAWC,EAAGC,KAG3BK,IvDhBwBvM,CAAAA,IAAAA,WuDmB1BiM,MAAAA,SAAAA,EAAGC,GACDrL,OAAAA,KAAKE,MAAM,KAAKoL,gBAAgBF,EAAGC,GAAK,GAAK,GAAK,GAAK,KvDpB/BlM,CAAAA,IAAAA,UuDuB3BiM,MAAAA,SAAAA,EAAGC,GACArL,OAAAA,KAAKwL,IAAI,EAAcJ,EAAAA,EAAAA,WAAAA,UAAAA,MAAAA,KAAAA,KAAAA,EAAGC,GAAK,MvDxBPlM,CAAAA,CAAAA,IAAAA,auDgCf,MAAA,WACT,MAAA,kBvDjCwBA,EAAAA,GwDHlBoN,GxDGkBpN,SAAAA,GAAAA,SAAAA,IAAAA,OAAAA,EAAAA,KAAAA,GAAAA,EAAAA,KAAAA,EAAAA,GAAAA,MAAAA,KAAAA,YAAAA,OAAAA,EAAAA,EwDHEkN,IxDGFlN,EAAAA,EAAAA,CAAAA,CAAAA,IAAAA,SwDD5BkH,MAAAA,SAAAA,EAAUxG,GACPyK,IAAAA,EAAOjE,EAASR,MAAMqE,QAAqBrK,EAAX,IAAIuK,KACpCa,EAAgB5E,EAAS4E,eAAiBpL,EAC1CuL,EAAK,KAAKnF,UAAkBgF,EAANX,EACtBe,EAAK,KAAKpF,UAA4BqE,EAAhBW,EAEtBS,EAAO,CACT,CAAC,KAAKc,SAASpB,EAAGC,IAClB,CAAC,KAAKiB,SAASlB,EAAGC,IAClB,CAAC,KAAKQ,QAAQT,EAAGC,IACjB,CAAC,KAAKM,SAASP,EAAGC,IAClB,CAAC,KAAKH,WAAWE,EAAGC,KAOjBK,OAJJ,KAAKZ,aACJY,EAAKxJ,KAAK,CAAC,KAAKiJ,WAAWC,EAAGC,KAG3BK,IxDjBwBvM,CAAAA,IAAAA,WwDoB1BiM,MAAAA,SAAAA,EAAGC,GACDrL,OAAAA,KAAKE,MAAMF,KAAKkE,IAAI,EAAG,KAAKoH,gBAAgBF,EAAGC,GAAK,GAAK,GAAK,GAAK,EAAI,OxDrB/ClM,CAAAA,IAAAA,WwDwB1BiM,MAAAA,SAAAA,EAAGC,GACDrL,OAAAA,KAAKwL,IAAI,EAAeJ,EAAAA,EAAAA,WAAAA,WAAAA,MAAAA,KAAAA,KAAAA,EAAGC,GAAK,OxDzBRlM,CAAAA,CAAAA,IAAAA,awDiCf,MAAA,WACT,MAAA,kBxDlCwBA,EAAAA,GAAAA,GAAAA,OAAAA,OAAAA,CAAAA,QAAAA,GAAAA,WAAAA,GAAAA,cAAAA,GAAAA,YAAAA,GAAAA,gBAAAA,GAAAA,oBAAAA,GAAAA,YAAAA,GAAAA,YAAAA,KyDXvC,SAAS2I,GAAMF,EAAI6E,GACR7E,OAAAA,EAAMA,EAAG8E,WAAa9E,EAAG8E,WAAWD,GAAS7E,EAAG6E,GAAU,KCJtD,SAAS7E,GAAAA,EAAIvB,GACxBA,EAASsG,gBAAgBC,MAAMhF,EAAIA,EAAG8E,WAAW,IAE9CrG,EAASX,KAAKoF,aACbzE,EAASsG,gBAAgBC,MAAMhF,EAAIA,EAAG8E,WAAW,IAGlDrG,EAASX,KAAKqF,aACb1E,EAASwG,YAAY,SAASD,MAAMhF,EAAG8E,WAAW,IAClDrG,EAASwG,YAAY,WAAWD,MAAMhF,EAAG8E,WAAW,IAEjDrG,EAASX,KAAKoF,aACbzE,EAASwG,YAAY,WAAWD,MAAMhF,EAAG8E,WAAW,K1DEzBvN,I2DLxB,GAAA,CACXuG,KAAMkF,GACNrF,MCHW,CACX+D,QCPW,SAAS1B,EAAIvB,GACxBsB,GAAeC,EAAI,CACfK,GAAc,MAAO,CAAQ,MAAA,uBAC7BA,GAAc,MAAO,CAAQ,MAAA,6BDKjC6E,UHCW,SAASlF,EAAIvB,GAClB0G,IAAAA,EAAQ1G,EAASxG,MAAM0D,OAAO9C,IAAI,SAACuM,EAAOxM,GACtCyM,IAAAA,EAAUnF,GAAMzB,EAASuB,GAAKvB,EAASuB,GAAGsF,iBAAiB,qBAAuB,KAAM1M,GAExF2M,EAAQH,EAAMvM,IAAI,SAACZ,EAAOc,GACtByM,IATJxF,EASIwF,EAAStF,GAAMmF,EAAUA,EAAQC,iBAAiB,oBAAsB,KAAMvM,GAC9E0M,GAVJzF,EAUqBwF,GATnBxF,EAAG0F,cAAc,0CAA0CnF,UAAY,KAWpE9B,OAAAA,EAASkH,WAAW1N,EAAO,CAC9B2N,SAAUH,EACVpH,UAAWI,EAASJ,UACpBC,cAAeG,EAASX,KAAKQ,eAAiBG,EAASX,KAAK+H,UAI7DpH,OAAAA,EAASqH,YAAYP,KAOhCxF,GAAeC,EAJDmF,EAAMtM,IAAI,SAAAuM,GACbA,OAAAA,EAAMnE,aGnBjBc,METW,SAAS/B,EAAIvB,GAKxBsB,GAAeC,EAJDvB,EAASf,MAAM7E,IAAI,SAAAgJ,GACtBA,OAAAA,EAAKZ,aFQhBe,MGVW,SAAShC,EAAIvB,GACxBuB,EAAGO,UAAY9B,EAASsH,EAAEtH,EAASwD,QHUnCL,KITW,SAAS5B,EAAIvB,GAClBuH,I5DgHW/N,E4DhHX+N,EAAcvH,EAASmH,WACxBnH,EAASJ,U5DyFX,SAAcpG,GASVsE,OAAAA,EARYtE,EACdM,WACA6D,MAAM,IACNvD,IAAI,SAAA6D,GAAQD,OAAAA,EAAqBC,EAAM,SAACuJ,EAAOpJ,GACrC,OAACoJ,GAASpJ,EAAOoJ,EAAM3J,IAAMO,EAAO,EAAIoJ,EAAMlK,QAExDmK,KAAK,IAEsBjO,EAAAA,I4DlGiBkO,CAAK1H,EAASxG,O5DwHxDsE,GATUtE,E4D/GcwG,EAASxG,O5DiHnCM,WACA6D,MAAM,IACNvD,IAAI,SAAA6D,GAAQD,OAAAA,EAAqBC,EAAM,SAACuJ,EAAOpJ,GACrC,OAACoJ,GAASpJ,EAAOoJ,EAAMlK,IAAMc,EAAO,EAAIoJ,EAAM3J,QAExD4J,KAAK,IAEsBjO,EAAAA,K4DrH5BwG,EAASmH,UAAYnH,EAASmH,WAAanH,EAASxG,OACpD+H,EAAGoG,UAAUC,IAAI,QAGrBrG,EAAGsG,MAAMC,eAAoB9H,GAAAA,OAAAA,EAASH,cAAgB,EAAtD,MACA0B,EAAGsG,MAAME,kBAAuB/H,GAAAA,OAAAA,EAASH,cAAgB,EAAzD,MAEAG,EAASf,MAAQ,CACbe,EAASgI,eAAehI,EAASxG,MAAO,CACpCyO,QAAQ,IAEZjI,EAASgI,eAAeT,EAAa,CACjCU,QAAQ,KAIhB3G,GAAeC,EAAIvB,EAASf,MAAM7E,IAAI,SAAAgJ,GAAQA,OAAAA,EAAKZ,aJXnDU,SKZW,SAAS3B,EAAIvB,GAClBhB,IAAAA,GAAgC,IAApBgB,EAASiI,OAAkB,UACrB,IAApBjI,EAASiI,OAAmB,SAAW,KAG3C1G,EAAGoG,UAAUC,IAAI5I,GAEjBsC,GAAeC,EAAI,CACfK,GAAc,MAAO,CACjBA,GAAc,MAAO5B,EAASxG,MAAO,CAAQ,MAAA,QAC7CoI,GAAc,MAAO5B,EAASxG,MAAO,CAAQ,MAAA,YAC9C,CAAQ,MAAA,kCLEf0O,M5DDmCpP,OAAAA,OAAAA,CAAAA,WkEdxB,SAASyI,EAAIvB,GACxBA,EAASsG,gBAAgBC,MAAMhF,EAAIA,EAAG8E,WAAW,IACjDrG,EAASsG,gBAAgBC,MAAMhF,EAAIA,EAAG8E,WAAW,IAE9CrG,EAASX,KAAKoF,aACbzE,EAASsG,gBAAgBC,MAAMhF,EAAIA,EAAG8E,WAAW,IAGlDrG,EAASX,KAAKqF,aACb1E,EAASwG,YAAY,QAAQD,MAAMhF,EAAG8E,WAAW,IACjDrG,EAASwG,YAAY,SAASD,MAAMhF,EAAG8E,WAAW,IAClDrG,EAASwG,YAAY,WAAWD,MAAMhF,EAAG8E,WAAW,IAEjDrG,EAASX,KAAKoF,aACbzE,EAASwG,YAAY,WAAWD,MAAMhF,EAAG8E,WAAW,MlEAzBvN,YmEdxB,SAASyI,EAAIvB,GACxBA,EAASsG,gBAAgBC,MAAMhF,EAAIA,EAAG8E,WAAW,IAE9CrG,EAASX,KAAKoF,aACbzE,EAASsG,gBAAgBC,MAAMhF,EAAIA,EAAG8E,WAAW,IAGlDrG,EAASX,KAAKqF,aACb1E,EAASwG,YAAY,SAASD,MAAMhF,EAAG8E,WAAW,IAClDrG,EAASwG,YAAY,WAAWD,MAAMhF,EAAG8E,WAAW,IAEjDrG,EAASX,KAAKoF,aACbzE,EAASwG,YAAY,WAAWD,MAAMhF,EAAG8E,WAAW,MnEEzBvN,coEdxB,SAASyI,EAAIvB,GACrBA,EAASX,KAAKoF,aACbzE,EAASsG,gBAAgBC,MAAMhF,EAAIA,EAAG8E,WAAW,IAGlDrG,EAASX,KAAKqF,aACb1E,EAASwG,YAAY,WAAWD,MAAMhF,EAAG8E,WAAW,IAEjDrG,EAASX,KAAKoF,aACbzE,EAASwG,YAAY,WAAWD,MAAMhF,EAAG8E,WAAW,MpEKzBvN,gBqEZxB,SAASyI,EAAIvB,GAGrBA,GAFHyF,GAAoBlE,EAAIvB,GAErBA,EAASX,KAAKwG,cAAgB7F,EAASX,KAAK0G,SAAU,CAC/CvC,IAAAA,EAAQxD,EAASwG,YAAYxG,EAASX,KAAK0G,UAC3ChE,EAASR,EAAG8E,WAAW9E,EAAG8E,WAAW9I,OAAS,GAEpDiG,EAAM+C,MAAMxE,GAAQ4F,UAAUC,IAAI,yBrEKH9O,oBAAAA,GAAAA,YsEdxB,SAASyI,EAAIvB,GACxBA,EAASsG,gBAAgBC,MAAMhF,EAAIA,EAAG8E,WAAW,IACjDrG,EAASsG,gBAAgBC,MAAMhF,EAAIA,EAAG8E,WAAW,IACjDrG,EAASsG,gBAAgBC,MAAMhF,EAAIA,EAAG8E,WAAW,IAE9CrG,EAASX,KAAKoF,aACbzE,EAASsG,gBAAgBC,MAAMhF,EAAIA,EAAG8E,WAAW,IAGlDrG,EAASX,KAAKqF,aACb1E,EAASwG,YAAY,SAASD,MAAMhF,EAAG8E,WAAW,IAClDrG,EAASwG,YAAY,QAAQD,MAAMhF,EAAG8E,WAAW,IACjDrG,EAASwG,YAAY,SAASD,MAAMhF,EAAG8E,WAAW,IAClDrG,EAASwG,YAAY,WAAWD,MAAMhF,EAAG8E,WAAW,IAEjDrG,EAASX,KAAKoF,aACbzE,EAASwG,YAAY,WAAWD,MAAMhF,EAAG8E,WAAW,MtEFzBvN,YuEdxB,SAASyI,EAAIvB,GACxBA,EAASsG,gBAAgBC,MAAMhF,EAAIA,EAAG8E,WAAW,IACjDrG,EAASsG,gBAAgBC,MAAMhF,EAAIA,EAAG8E,WAAW,IACjDrG,EAASsG,gBAAgBC,MAAMhF,EAAIA,EAAG8E,WAAW,IACjDrG,EAASsG,gBAAgBC,MAAMhF,EAAIA,EAAG8E,WAAW,IAE9CrG,EAASX,KAAKoF,aACbzE,EAASsG,gBAAgBC,MAAMhF,EAAIA,EAAG8E,WAAW,IAGlDrG,EAASX,KAAKqF,aACb1E,EAASwG,YAAY,SAASD,MAAMhF,EAAG8E,WAAW,IAClDrG,EAASwG,YAAY,SAASD,MAAMhF,EAAG8E,WAAW,IAClDrG,EAASwG,YAAY,QAAQD,MAAMhF,EAAG8E,WAAW,IACjDrG,EAASwG,YAAY,SAASD,MAAMhF,EAAG8E,WAAW,IAClDrG,EAASwG,YAAY,WAAWD,MAAMhF,EAAG8E,WAAW,IAEjDrG,EAASX,KAAKoF,aACbzE,EAASwG,YAAY,WAAWD,MAAMhF,EAAG8E,WAAW,UZN5DlH,SAAUgJ,G3DEyBrP,OAAAA,SAAAA,GA+BvByI,SAAAA,EAAAA,EAAI/H,EAAO4B,GAAY,IAAA,EAAA,EAAA,KAAA,GAC3BuD,EAAS4C,EAAIG,cACb3I,EAAM8J,EAAgBvD,SAGvBxE,EAAStB,KAAW4B,IACnBA,EAAa5B,EACbA,OAAQkG,GAGNL,IAAAA,EAAOjE,EAAWiE,MAAQ+I,GAAc/I,KAVf,cAYxBjE,EAAWiE,MAEZ/D,EAAAA,EAAAA,KAAAA,EAAAA,GAAAA,KAAAA,KAAAA,OAAOC,OAAO,CAChBqJ,cAAepL,EACf0F,MAAOkJ,GAAclJ,MACrBC,SAAUiJ,GAAcjJ,SACxBK,MAAOiE,GAAM7C,KAAKxF,EAAWsI,UAAY,MAC1CtI,MAEMiE,OACAA,EAAAA,KAAOA,GAGXkH,EAAAA,MAAMhF,GAzBoB,EA/BAzI,OAAAA,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,CAAAA,CAAAA,IAAAA,QA6K7ByI,MAAAA,SAAAA,GAKK,OAJKA,EAAAA,EAAAA,EAAAA,WAAAA,QAAAA,MAAAA,KAAAA,KAAAA,GAEPlC,KAAAA,KAAKgJ,QAAQ,MAEX,OAlLwBvP,CAAAA,IAAAA,SA0L1B,MAAA,WAiBE,OAjBF,EAAA,EAAA,EAAA,WAAA,SAAA,MAAA,KAAA,MAOF,KAAKoG,MAAMgJ,MAAM,KAAK7I,KAAKP,OACrBI,KAAAA,MAAMgJ,MAAM,KAAK7I,KAAKP,MAAM,KAAKyC,GAAI,MAMzClC,KAAAA,KAAKiJ,SAAS,MAGZ,KAAK/G,KA3MmBzI,CAAAA,IAAAA,QAoN7BK,MAAAA,SAAAA,GAAI,IAAA,EAAA,KAcC,OAbH,KAAKqG,MAAMqE,UACNrK,KAAAA,MAAQ,KAAKoL,eAGtB5K,EAAY,KAAKqF,KAAKiB,UAAY,KAAKjB,KAAKiB,OAAS,KAAKA,QAC1DtG,EAAY,KAAKqF,KAAKuF,iBAAmB,KAAKvF,KAAKuF,cAAgB,KAAKA,eAEnEpF,KAAAA,MAAMmB,MAAM,WACb,EAAKtB,KAAKqE,SAAS,EAAMvK,KAGxBkG,KAAAA,KAAKwE,QAAQ,MAEX,KAAKxD,KAAK,WAlOcvH,CAAAA,IAAAA,OA2O9BK,MAAAA,SAAAA,GAIM,OAHFqG,KAAAA,MAAMY,KAAKjH,GACXkG,KAAAA,KAAKkJ,QAAQ,MAEX,KAAKlI,KAAK,UA/OcvH,CAAAA,IAAAA,QAwP7BK,MAAAA,SAAAA,GAAI,IAAA,EAAA,KAKC,OAJFK,KAAAA,MAAQ,KAAKoL,cACbpF,KAAAA,MAAMgJ,MAAM,WAAM,OAAA,EAAK9E,SAAS,EAAMvK,KACtCkG,KAAAA,KAAKmJ,MAAM,MAET,KAAKnI,KAAK,WA7PcvH,CAAAA,IAAAA,YAwQzBU,MAAAA,SAAAA,GAGC,OAFF6F,KAAAA,KAAKa,UAAU,KAAM1G,GAEnB,OA3QwBV,CAAAA,IAAAA,YAsRzBU,MAAAA,SAAAA,GAGC,OAFF6F,KAAAA,KAAKY,UAAU,KAAMzG,GAEnB,OAzRwBV,CAAAA,IAAAA,gBAmSrBsC,MAAAA,SAAAA,GACH6H,OAAAA,GAAQrC,KAAKtF,OAAOC,OAAO,CAC9B2D,MAAO,KAAKA,MACZC,SAAU,KAAKA,UAChB/D,MAvS4BtC,CAAAA,IAAAA,aAkTxBU,MAAAA,SAAAA,EAAO4B,GACP+H,OAAAA,GAAKvC,KAAKpH,EAAO8B,OAAOC,OAAO,CAClC2D,MAAO,KAAKA,MACZC,SAAU,KAAKA,UAChB/D,MAtT4BtC,CAAAA,IAAAA,cAiUvBU,MAAAA,SAAAA,EAAO4B,GACRmI,OAAAA,GAAM3C,KAAKpH,EAAO8B,OAAOC,OAAO,CACnC2D,MAAO,KAAKA,MACZC,SAAU,KAAKA,UAChB/D,MArU4BtC,CAAAA,IAAAA,cAgVvBmG,MAAAA,SAAAA,EAAO7D,GACRkI,OAAAA,GAAM1C,KAAK3B,EAAO3D,OAAOC,OAAO,CACnC2D,MAAO,KAAKA,MACZC,SAAU,KAAKA,UAChB/D,MApV4BtC,CAAAA,IAAAA,OAgExB,IAAA,WACA,OAAA,KAAK2P,OAGPjP,IAAAA,SAAAA,GACDmF,EAASnF,EAAO,CAACiG,EAAM,SAAU,cACjC1G,EAAM8J,EAAgBxD,MAGrBoJ,KAAAA,OAASC,GAAMlP,IAAUA,GAAOoH,KAAKtF,OAAOC,OAAO,KAAKiD,sBAAuB,CAChFoG,cAAe,KAAKvF,KAAO,KAAKA,KAAKuF,mBAAgBlF,KAGpD+I,KAAAA,MAAME,YAAY,MAEpB,KAAKnP,MACCiP,KAAAA,MAAMjP,MAAQ,KAAK6F,KAAKyB,gBAAgB,KAAM,KAAKtH,MAAMA,OAEzD,KAAKA,QACLA,KAAAA,MAAQ,KAAKoL,eAGjBrD,KAAAA,IAAM,KAAKiB,WAtFe1J,CAAAA,IAAAA,SA8FtB,IAAA,WACFM,OAAAA,EAAW,KAAK2H,SAAW,KAAKA,QAAQ,MAAQ,KAAKA,SAGrDvH,IAAAA,SAAAA,GACFuH,KAAAA,QAAUvH,IAnGgBV,CAAAA,IAAAA,QA2GvB,IAAA,WACD,OAAA,KAAK8P,QAGNpJ,IAAAA,SAAAA,GACFb,EAASa,EAAOiE,KAChB1K,EAAM8J,EAAgBrD,OAGrBoJ,KAAAA,OAASpJ,IApHiB1G,CAAAA,IAAAA,QA4HvB,IAAA,WACD,OAAA,KAAKuG,KAAO,KAAKA,KAAK7F,MAAQ,MAG/BA,IAAAA,SAAAA,GACH,IAAC,KAAK6F,KACC,MAAA,IAAIpG,MAAM,8CAGjBO,aAAiB+E,EACXc,KAAAA,KAAK7F,MAAQA,EAEd,KAAKA,MACJ6F,KAAAA,KAAK7F,MAAQ,KAAK6F,KAAK7F,MAAMqP,MAAMrP,GAGnC6F,KAAAA,KAAK7F,MAAQ,KAAK6F,KAAKyB,gBAAgB,KAAMtH,GAGjD+H,KAAAA,IAAM,KAAKiB,WA/Ie1J,CAAAA,IAAAA,gBAuJf,IAAA,WACbM,OAAAA,EAAW,KAAK4H,kBAAoB,KAAKA,eAAelC,KAChD,KAAKkC,iBAGZhH,EAAY,KAAKgH,iBAAoB/G,EAAO,KAAK+G,gBAI9C,KAAK3B,KAAO,KAAKA,KAAKU,oBAAiBL,EAHnC,KAAKsB,gBAMFxH,IAAAA,SAAAA,GACTwH,KAAAA,eAAiBxH,KApKSV,CAAAA,CAAAA,IAAAA,aAqWf,MAAA,WACT,MAAA,cAtWwBA,CAAAA,IAAAA,iBAgXbU,MAAAA,SAAAA,GACdmF,EAASnF,EAAOiG,IAChB1G,EAAM8J,EAAgBxD,MAG1B+I,GAAc/I,KAAO7F,IArXUV,CAAAA,IAAAA,kBA8XZU,MAAAA,SAAAA,GACfmF,EAASnF,EAAO,WAChBT,EAAM8J,EAAgB3D,OAG1BkJ,GAAclJ,MAAQ1F,IAnYSV,CAAAA,IAAAA,qBA4YTU,MAAAA,SAAAA,GAClBmF,EAASnF,EAAO,WAChBT,EAAM8J,EAAgB1D,UAG1BiJ,GAAcjJ,SAAW3F,IAjZMV,CAAAA,IAAAA,WA4Vb,IAAA,WACXsP,OAAAA,OA7VwBtP,EAAAA;;AwEHvC,aAXA,IAAA,EAAA,EAAA,QAAA,cAWA,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GATA,IAAMyI,EAAKM,SAASoF,cAAc,aAE5B6B,EAAQ,IAAIrC,EAAJ,QAAclF,EAAI,IAAIwC,KAAK,cAAe,CACpDgF,UAAW,aACXnJ,WAAW,IAGfkJ,EAAMzJ,KAAO,aAEb2J,QAAQC,IAAIH","file":"src.f1df22b1.js","sourceRoot":"../src","sourcesContent":["import Face from './Face';\nimport List from './List';\nimport Group from './Group';\nimport Label from './Label';\nimport Timer from './Timer';\nimport Divider from './Divider';\nimport * as Faces from '../Faces';\nimport FaceValue from './FaceValue';\nimport DomComponent from './DomComponent';\nimport validate from '../Helpers/Validate';\nimport DefaultValues from '../Config/DefaultValues';\nimport ConsoleMessages from '../Config/ConsoleMessages';\nimport { flatten, isNull, isString, isObject, isUndefined, isFunction, error } from '../Helpers/Functions';\n\nexport default class FlipClock extends DomComponent {\n   \n    /**\n     * Create a new `FlipClock` instance.\n     *\n     * @class FlipClock\n     * @extends DomComponent\n     * @param {HTMLElement} el - The HTML element used to bind clock DOM node.\n     * @param {*} value - The value that is passed to the clock face.\n     * @param {object|undefined} attributes - {@link FlipClock.Options} passed an object with key/value.\n     */\n        \n    /**\n     * @namespace FlipClock.Options\n     * @classdesc An object of key/value pairs that will be used to set the attributes.\n     * \n     * ##### Example:\n     * \n     *     {\n     *        face: 'DayCounter',\n     *        language: 'es',\n     *        timer: Timer.make(500)\n     *     }\n     * \n     * @property {string|Face} [face={@link Faces.DayCounter}] - The clock's {@link Face} instance.\n     * @property {number} [interval=1000] - The clock's interval rate (in milliseconds).\n     * @property {object} [theme={@link Themes.Original}] - The clock's theme.\n     * @property {string|object} [language={@link Languages.English}] - The clock's language.\n     * @property {Timer} [timer={@link Timer}] - The clock's timer.\n     */\n    \n    constructor(el, value, attributes) {\n        if(!validate(el, HTMLElement)) {\n            error(ConsoleMessages.element);\n        }\n\n        if(isObject(value) && !attributes) {\n            attributes = value;\n            value = undefined;\n        }\n\n        const face = attributes.face || DefaultValues.face;\n\n        delete attributes.face;\n\n        super(Object.assign({\n            originalValue: value,\n            theme: DefaultValues.theme,\n            language: DefaultValues.language,\n            timer: Timer.make(attributes.interval || 1000),\n        }, attributes));\n\n        if(!this.face) {\n            this.face = face;\n        }\n\n        this.mount(el);\n    }\n\n    /**\n     * The clock `Face`.\n     *\n     * @type {Face}\n     */\n    get face() {\n        return this.$face;\n    }\n\n    set face(value) {\n        if(!validate(value, [Face, 'string', 'function'])) {\n            error(ConsoleMessages.face);\n        }\n\n        this.$face = (Faces[value] || value).make(Object.assign(this.getPublicAttributes(), {\n            originalValue: this.face ? this.face.originalValue : undefined\n        }));\n\n        this.$face.initialized(this);\n\n        if(this.value) {\n            this.$face.value = this.face.createFaceValue(this, this.value.value);\n        }\n        else if(!this.value) {\n            this.value = this.originalValue;\n        }\n\n        this.el && this.render();\n    }\n\n    /**\n     * The `stopAt` attribute.\n     *\n     * @type {*}\n     */\n    get stopAt() {\n        return isFunction(this.$stopAt) ? this.$stopAt(this) : this.$stopAt;\n    }\n\n    set stopAt(value) {\n        this.$stopAt = value;\n    }\n\n    /**\n     * The `timer` instance.\n     *\n     * @type {Timer}\n     */\n    get timer() {\n        return this.$timer;\n    }\n\n    set timer(timer) {\n        if(!validate(timer, Timer)) {\n            error(ConsoleMessages.timer);\n        }\n\n        this.$timer = timer;\n    }\n\n    /**\n     * Helper method to The clock's `FaceValue` instance.\n     *\n     * @type {FaceValue|null}\n     */\n    get value() {\n        return this.face ? this.face.value : null;\n    }\n\n    set value(value) {\n        if(!this.face) {\n            throw new Error('A face must be set before setting a value.');\n        }\n\n        if(value instanceof FaceValue) {\n            this.face.value = value;\n        }\n        else if(this.value) {\n            this.face.value = this.face.value.clone(value);\n        }\n        else {\n            this.face.value = this.face.createFaceValue(this, value);\n        }\n\n        this.el && this.render();\n    }\n\n    /**\n     * The `originalValue` attribute.\n     *\n     * @type {*}\n     */\n    get originalValue() {\n        if(isFunction(this.$originalValue) && !this.$originalValue.name) {\n            return this.$originalValue();\n        }\n\n        if(!isUndefined(this.$originalValue) && !isNull(this.$originalValue)) {\n            return this.$originalValue;\n        }\n\n        return this.face ? this.face.defaultValue() : undefined;\n    }\n\n    set originalValue(value) {\n        this.$originalValue = value;\n    }\n\n    /**\n     * Mount the clock to the parent DOM element.\n     *\n     * @param  {HTMLElement} el - The parent `HTMLElement`.\n     * @return {FlipClock} - The `FlipClock` instance.\n     */\n    mount(el) {\n        super.mount(el);\n\n        this.face.mounted(this);\n\n        return this;\n    }\n\n    /**\n     * Render the clock's DOM nodes.\n     *\n     * @return {HTMLElement} - The parent `HTMLElement`.\n     */\n    render() {\n        // Call the parent render function\n        super.render();\n\n        // Check to see if the face has a render function defined in the theme.\n        // This allows a face to completely re-render or add to the theme.\n        // This allows face specific interfaces for a theme.\n        if(this.theme.faces[this.face.name]) {\n            this.theme.faces[this.face.name](this.el, this);\n        }\n\n        // Pass the clock instance to the rendered() function on the face.\n        // This allows global modifications to the rendered templates not\n        // theme specific.\n        this.face.rendered(this);\n\n        // Return the rendered `HTMLElement`.\n        return this.el;\n    }\n\n    /**\n     * Start the clock.\n     *\n     * @param  {Function} fn - The interval callback.\n     * @return {FlipClock} - The `FlipClock` instance.\n     */\n    start(fn) {\n        if(!this.timer.started) {\n            this.value = this.originalValue;\n        }\n\n        isUndefined(this.face.stopAt) && (this.face.stopAt = this.stopAt);\n        isUndefined(this.face.originalValue) && (this.face.originalValue = this.originalValue);\n\n        this.timer.start(() => {\n            this.face.interval(this, fn);\n        });\n\n        this.face.started(this);\n\n        return this.emit('start');\n    }\n\n    /**\n     * Stop the clock.\n     *\n     * @param  {Function} fn - The stop callback.\n     * @return {FlipClock} - The `FlipClock` instance.\n     */\n    stop(fn) {\n        this.timer.stop(fn);\n        this.face.stopped(this);\n\n        return this.emit('stop');\n    }\n\n    /**\n     * Reset the clock to the original value.\n     *\n     * @param  {Function} fn - The interval callback.\n     * @return {FlipClock} - The `FlipClock` instance.\n     */\n    reset(fn) {\n        this.value = this.originalValue;\n        this.timer.reset(() => this.interval(this, fn));\n        this.face.reset(this);\n\n        return this.emit('reset');\n    }\n\n    /**\n     * Helper method to increment the clock's value.\n     *\n     * @param  {*|undefined} value - Increment the clock by the specified value.\n     *     If no value is passed, then the default increment is determined by\n     *     the Face, which is usually `1`.\n     * @return {FlipClock} - The `FlipClock` instance.\n     */\n    increment(value) {\n        this.face.increment(this, value);\n\n        return this;\n    }\n\n    /**\n     * Helper method to decrement the clock's value.\n     *\n     * @param  {*|undefined} value - Decrement the clock by the specified value.\n     *     If no value is passed, then the default decrement is determined by\n     *     the `Face`, which is usually `1`.\n     * @return {FlipClock} - The `FlipClock` instance.\n     */\n    decrement(value) {\n        this.face.decrement(this, value);\n\n        return this;\n    }\n\n    /**\n     * Helper method to instantiate a new `Divider`.\n     *\n     * @param  {object|undefined} [attributes] - The attributes passed to the\n     *     `Divider` instance.\n     * @return {Divider} - The instantiated Divider.\n     */\n    createDivider(attributes) {\n        return Divider.make(Object.assign({\n            theme: this.theme,\n            language: this.language\n        }, attributes));\n    }\n\n    /**\n     * Helper method to instantiate a new `List`.\n     *\n     * @param  {*} value - The `List` value.\n     * @param  {object|undefined} [attributes] - The attributes passed to the\n     *     `List` instance.\n     * @return {List} - The instantiated `List`.\n     */\n    createList(value, attributes) {\n        return List.make(value, Object.assign({\n            theme: this.theme,\n            language: this.language\n        }, attributes));\n    }\n\n    /**\n     * Helper method to instantiate a new `Label`.\n     *\n     * @param  {*} value - The `Label` value.\n     * @param  {object|undefined} [attributes] - The attributes passed to the\n     *     `Label` instance.\n     * @return {Label} - The instantiated `Label`.\n     */\n    createLabel(value, attributes) {\n        return Label.make(value, Object.assign({\n            theme: this.theme,\n            language: this.language\n        }, attributes));\n    }\n\n    /**\n     * Helper method to instantiate a new `Group`.\n     *\n     * @param  {array} items - An array of `List` items to group.\n     * @param  {Group|undefined} [attributes] - The attributes passed to the\n     *     `Group` instance.\n     * @return {Group} - The instantiated `Group`.\n     */\n    createGroup(items, attributes) {\n        return Group.make(items, Object.assign({\n            theme: this.theme,\n            language: this.language\n        }, attributes));\n    }\n\n    /**\n     * The `defaults` attribute.\n     *\n     * @type {object}\n     */\n    static get defaults() {\n        return DefaultValues;\n    }\n\n    /**\n     * Define the name of the class.\n     *\n     * @return {string}\n     */\n    static defineName() {\n        return 'FlipClock';\n    }\n\n    /**\n     * Helper method to set the default `Face` value.\n     *\n     * @param  {Face} value - The default `Face` class.This should be a\n     *     constructor.\n     * @return {void}\n     */\n    static setDefaultFace(value) {\n        if(!validate(value, Face)) {\n            error(ConsoleMessages.face);\n        }\n\n        DefaultValues.face = value;\n    }\n\n    /**\n     * Helper method to set the default theme.\n     *\n     * @param {object} value - The default theme.\n     * @return {void}\n     */\n    static setDefaultTheme(value) {\n        if(!validate(value, 'object')) {\n            error(ConsoleMessages.theme);\n        }\n\n        DefaultValues.theme = value;\n    }\n\n    /**\n     * Helper method to set the default language.\n     *\n     * @param {object} value - The default language.\n     * @return {void}\n     */\n    static setDefaultLanguage(value) {\n        if(!validate(value, 'object')) {\n            error(ConsoleMessages.language);\n        }\n\n        DefaultValues.language = value;\n    }\n\n}\n","/**\n * These are a collection of helper functions, some borrowed from Lodash,\n * Underscore, etc, to provide common functionality without the need for using\n * a dependency. All of this is an attempt to reduce the file size of the\n * library.\n *\n * @namespace Helpers.Functions\n */\n\n/**\n * Throw a string as an Error exception.\n *\n * @function error\n * @param  {string} string - The error message.\n * @return {void}\n * @memberof Helpers.Functions\n */\nexport function error(string) {\n    throw Error(string);\n}\n\n/**\n * Check if `fn` is a function, and call it with `this` context and pass the\n * arguments.\n *\n * @function callback\n * @param  {string} string - The callback fn.\n * @param  {...*} args - The arguments to pass.\n * @return {void}\n * @memberof Helpers.Functions\n */\nexport function callback(fn, ...args) {\n    if(isFunction(fn)) {\n        return fn.call(this, ...args);\n    }\n}\n\n/**\n * Round the value to the correct value. Takes into account negative numbers.\n *\n * @function round\n * @param  {value} string - The value to round.\n * @return {string} - The rounded value.\n * @memberof Helpers.Functions\n */\nexport function round(value) {\n    return isNegativeZero(\n        value = isNegative(value) ? Math.ceil(value) : Math.floor(value)\n    ) ? ('-' + value).toString() : value;\n}\n\n/**\n * Returns `true` if `undefined or `null`.\n *\n * @function noop\n * @param  {value} string - The value to check.\n * @return {boolean} - `true` if `undefined or `null`.\n * @memberof Helpers.Functions\n */\nexport function noop(value) {\n    return !isUndefined(value) && !isNull(value);\n}\n\n/**\n * Returns a function that executes the `before` attribute and passes that value\n * to `after` and the subsequent value is returned.\n *\n * @function chain\n * @param  {function} before - The first function to execute.\n * @param  {function} after - The subsequent function to execute.\n * @return {function} - A function that executes the chain.\n * @memberof Helpers.Functions\n */\nexport function chain(before, after) {\n    return () => after(before());\n}\n\n/**\n * Returns a function that returns maps the values before concatenating them.\n *\n * @function concatMap\n * @param  {function} fn - The map callback function.\n * @return {function} - A function that executes the map and concatenation.\n * @memberof Helpers.Functions\n */\nexport function concatMap(fn) {\n    return x => {\n        return x.map(fn).reduce((x, y) => x.concat(y), []);\n    }\n}\n\n/**\n * Flatten an array.\n *\n * @function flatten\n * @param  {array} value - The array to flatten.\n * @return {array} - The flattened array.\n * @memberof Helpers.Functions\n */\nexport function flatten(value) {\n    return concatMap(value => value)(value)\n}\n\n/**\n * Deep flatten an array.\n *\n * @function deepFlatten\n * @param  {array} value - The array to flatten.\n * @return {array} - The flattened array.\n * @memberof Helpers.Functions\n */\nexport function deepFlatten(x) {\n    return concatMap(x => Array.isArray(x) ? deepFlatten (x) : x)(x);\n}\n\n/**\n * Capitalize the first letter in a string.\n *\n * @function ucfirst\n * @param  {string} string - The string to capitalize.\n * @return {string} - The capitalized string.\n * @memberof Helpers.Functions\n */\nexport function ucfirst(string) {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n}\n\n/**\n * Returns the length of a deep flatten array.\n *\n * @function length\n * @param  {array} value - The array to count.\n * @return {number} - The length of the deep flattened array.\n * @memberof Helpers.Functions\n */\nexport function length(value) {\n    return deepFlatten(value).length;\n}\n\n/**\n * Determines if a value is a negative zero.\n *\n * @function isNegativeZero\n * @param  {number} value - The value to check.\n * @return {boolean} - Returns `true` if the value is a negative zero (`-0`).\n * @memberof Helpers.Functions\n */\nexport function isNegativeZero(value) {\n    return 1 / Math.round(value) === -Infinity;\n}\n\n/**\n * Determines if a value is a negative.\n *\n * @function isNegative\n * @param  {number} value - The value to check.\n * @return {boolean} - Returns `true` if the value is a negative.\n * @memberof Helpers.Functions\n */\nexport function isNegative(value) {\n    return isNegativeZero(value) || value < 0;\n}\n\n/**\n * Determines if a value is `null`.\n *\n * @function isNull\n * @param  {*} value - The value to check.\n * @return {boolean} - Returns `true` if the value is a `null`.\n * @memberof Helpers.Functions\n */\nexport function isNull(value) {\n    return value === null;// || typeof value === 'null';\n}\n\n/**\n * Determines if a value is `undefined`.\n *\n * @function isNull\n * @param  {*} value - The value to check.\n * @return {boolean} - Returns `true` if the value is a `undefined`.\n * @memberof Helpers.Functions\n */\nexport function isUndefined(value) {\n    return typeof value === 'undefined';\n}\n\n/**\n * Determines if a value is a constructor.\n *\n * @function isConstructor\n * @param  {*} value - The value to check.\n * @return {boolean} - Returns `true` if the value is a constructor.\n * @memberof Helpers.Functions\n */\nexport function isConstructor(value) {\n    return (value instanceof Function) && !!value.name;\n}\n\n/**\n * Determines if a value is a string.\n *\n * @function isString\n * @param  {*} value - The value to check.\n * @return {boolean} - Returns `true` if the value is a string.\n * @memberof Helpers.Functions\n */\nexport function isString(value) {\n    return typeof value === 'string';\n}\n\n/**\n * Determines if a value is a array.\n *\n * @function isString\n * @param  {*} value - The value to check.\n * @return {boolean} - Returns `true` if the value is a string.\n * @memberof Helpers.Functions\n */\nexport function isArray(value) {\n    return value instanceof Array;\n}\n\n/**\n * Determines if a value is an object.\n *\n * @function isObject\n * @param  {*} value - The value to check.\n * @return {boolean} - Returns `true` if the value is an object.\n * @memberof Helpers.Functions\n */\nexport function isObject(value) {\n    const type = typeof value;\n    return value != null && !isArray(value) && (\n        type == 'object' || type == 'function'\n    );\n}\n\n/**\n * Determines if a value is a function.\n *\n * @function isObject\n * @param  {*} value - The value to check.\n * @return {boolean} - Returns `true` if the value is a function.\n * @memberof Helpers.Functions\n */\nexport function isFunction(value) {\n    return value instanceof Function;\n}\n\n/**\n * Determines if a value is a number.\n *\n * @function isObject\n * @param  {*} value - The value to check.\n * @return {boolean} - Returns `true` if the value is a number.\n * @memberof Helpers.Functions\n */\nexport function isNumber(value) {\n    return !isNaN(value);\n}\n\n/**\n * Converts a string into kebab case.\n *\n * @function kebabCase\n * @param  {string} string - The string to convert.\n * @return {string} - The converted string.\n * @memberof Helpers.Functions\n */\nexport function kebabCase(string) {\n    return string.replace(/([a-z])([A-Z])/g, '$1-$2').replace(/\\s+/g, '-').toLowerCase();\n}\n","import { chain, error, callback, isObject, kebabCase } from '../Helpers/Functions';\n\nexport default class Component {\n\n    /**\n     * Abstract base class.\n     *\n     * @class Component\n     * @param {(object|undefined)} [attributes] - The instance attributes.\n     */\n    constructor(attributes) {\n        this.setAttribute(Object.assign({\n            events: {}\n        }, attributes));\n    }\n\n    /**\n     * Get the `name` attribute.\n     *\n     * @type {string}\n     */\n    get name() {\n        if(!(this.constructor.defineName instanceof Function)) {\n            error('Every class must define its name.');\n        }\n\n        return this.constructor.defineName();\n    }\n\n    /**\n     * The `events` attribute.\n     *\n     * @type {object}\n     */\n    get events() {\n        return this.$events || {};\n    }\n\n    set events(value) {\n        this.$events = value;\n    }\n\n    /**\n     * Emit an event.\n     *\n     * @param  {string} key - The event id/key.\n     * @return {Component} - Returns `this` instance.\n     */\n    emit(key, ...args) {\n        if(this.events[key]) {\n            this.events[key].forEach(event => {\n                event.apply(this, args);\n            });\n        }\n\n        return this;\n    }\n\n    /**\n     * Start listening to an event.\n     *\n     * @param  {string} key - The event id/key.\n     * @param  {Function} fn - The listener callback function.\n     * @param  {boolean} [once=false] - Should the event handler be fired a\n     *     single time.\n     * @return {Component} - Returns `this` instance.\n     */\n    on(key, fn, once = false) {\n        if(!this.events[key]) {\n            this.events[key] = [];\n        }\n\n        this.events[key].push(fn);\n\n        return this;\n    }\n\n    /**\n     * Stop listening to an event.\n     *\n     * @param {string} key - The event id/key.\n     * @param {(Function|undefined)} fn - The listener callback function. If no\n     *     function is defined, all events with the specified id/key will be\n     *     removed. Otherwise, only the event listeners matching the id/key AND\n     *     callback will be removed.\n     * @return {Component} - Returns `this` instance.\n     */\n    off(key, fn) {\n        if(this.events[key] && fn) {\n            this.events[key] = this.events[key].filter(event => {\n                return event !== fn;\n            });\n        }\n        else {\n            this.events[key] = [];\n        }\n\n        return this;\n    }\n\n    /**\n     * Listen to an event only one time.\n     *\n     * @param  {string} key - The event id/key.\n     * @param  {Function} fn - The listener callback function.\n     * @return {Component} - Returns `this` instance.\n     */\n    once(key, fn) {\n        fn = chain(fn, () => this.off(key, fn));\n\n        return this.on(key, fn, true);\n    }\n\n    /**\n     * Get an attribute. Returns null if no attribute is defined.\n     *\n     * @param  {string} key - The attribute name.\n     * @return {*} - The attribute value.\n     */\n    getAttribute(key) {\n        return this.hasOwnProperty(key) ? this[key] : null;\n    }\n\n    /**\n     * Get all the atttributes for this instance.\n     *\n     * @return {object} - The attribute dictionary.\n     */\n    getAttributes() {\n        const attributes = {};\n\n        Object.getOwnPropertyNames(this).forEach(key => {\n            attributes[key] = this.getAttribute(key);\n        });\n\n        return attributes;\n    }\n\n    /**\n     * Get only public the atttributes for this instance. Omits any attribute\n     * that starts with `$`, which is used internally.\n     *\n     * @return {object} - The attribute dictionary.\n     */\n    getPublicAttributes() {\n        return Object.keys(this.getAttributes())\n            .filter(key => {\n                return !key.match(/^\\$/);\n            })\n            .reduce((obj, key) => {\n                obj[key] = this.getAttribute(key);\n                return obj;\n            }, {});\n    }\n\n    /**\n     * Set an attribute key and value.\n     *\n     * @param  {string} key - The attribute name.\n     * @param  {*} value - The attribute value.\n     * @return {void}\n     */\n    setAttribute(key, value) {\n        if(isObject(key)) {\n            this.setAttributes(key);\n        }\n        else {\n            this[key] = value;\n        }\n    }\n\n    /**\n     * Set an attributes by object of key/value pairs.\n     *\n     * @param  {object} values - The object dictionary.\n     * @return {void}\n     */\n    setAttributes(values) {\n        for(const i in values) {\n            this.setAttribute(i, values[i]);\n        }\n    }\n\n    /**\n     * Helper method to execute the `callback()` function.\n     *\n     * @param  {Function} fn - The callback function.\n     * @return {*} - Returns the executed callback function.\n     */\n    callback(fn) {\n        return callback.call(this, fn);\n    }\n\n    /**\n     * Factor method to static instantiate new instances. Useful for writing\n     * clean expressive syntax with chained methods.\n     *\n     * @param  {...*} args - The callback arguments.\n     * @return {*} - The new component instance.\n     */\n    static make(...args) {\n        return new this(...args);\n    }\n\n}\n","/**\n * @namespace Helpers.Digitize\n */\nimport { flatten } from './Functions';\nimport { deepFlatten } from './Functions';\n\n/**\n * Digitize a number, string, or an array into a digitized array. This function\n * use by the `Face`, which convert the digitized array into an array of `List`\n * instances.\n *\n * @function digitize\n * @param  {*} value - The value to digitize.\n * @param  {(Object|undefined)} [options] - The digitizer options.\n * @return {array} - The digitized array.\n * @memberof Helpers.Digitize\n */\nexport default function digitize(value, options) {\n    options = Object.assign({\n        minimumDigits: 0,\n        prependLeadingZero: true\n    }, options);\n\n    function prepend(number) {\n        const shouldPrependZero = options.prependLeadingZero &&\n            number.toString().split('').length === 1;\n\n        return (shouldPrependZero ? '0' : '').concat(number);\n    }\n\n    function digits(arr, min) {\n        const length = deepFlatten(arr).length;\n\n        if(length < min) {\n            for(let i = 0; i < min - length; i++) {\n                arr[0].unshift('0');\n            }\n        }\n\n        return arr;\n    }\n\n    return digits(flatten([value]).map(number => {\n        return flatten(deepFlatten([number]).map(number => {\n            return prepend(number).split('');\n        }));\n    }), options.minimumDigits || 0);\n}\n","/**\n * @namespace Helpers.Value\n */\n\n/**\n * An array of objects with min/max ranges.\n *\n * @private\n * @type {array}\n */\nconst RANGES = [{\n    // 0-9\n    min: 48,\n    max: 57\n},{\n    // a-z\n    min: 65,\n    max: 90\n},{\n    // A-Z\n    min: 97,\n    max: 122\n}];\n\n/**\n * Format a string into a new data type. Currently only supports string to\n * number conversion.\n *\n * @private\n * @function format\n * @param {string} string - The string to format.\n * @param {string} type - The data type (represented as a string) used to\n *     convert the string.\n * @return {boolean} - Returns the formatted string.\n */\nfunction format(string, type) {\n    switch(type) {\n        case 'number':\n            return parseFloat(string);\n    }\n\n    return string;\n}\n\n/**\n * Find the range object from the `RANGES` constant from the character given.\n * This is mainly an interval method, but can be used by faces to help\n * determine what the next value of a string should be.\n *\n * @private\n * @function format\n * @param {string} char - The char used to determine the range.\n * @param {string} type - The data type (represented as a string) used to\n *     convert the string.\n * @return {boolean} - Returns the formatted string.\n */\nfunction findRange(char) {\n    for(const i in RANGES) {\n        const code = char.toString().charCodeAt(0);\n\n        if(RANGES[i].min <= code && RANGES[i].max >= code) {\n            return RANGES[i];\n        }\n    }\n\n    return null;\n}\n\n/**\n * Create a string from a character code, which is returned by the callback.\n *\n * @private\n * @callback stringFromCharCodeBy\n * @param {string} char - The char used to determine the range.\n * @param {function} fn - The callback function receives `range` and `code`\n *     arguments. This function should return a character code.\n * @return {string} - Creates a string from the character code returned by the\n *     callback function.\n */\nfunction stringFromCharCodeBy(char, fn) {\n    return String.fromCharCode(\n        fn(findRange(char), char.charCodeAt(0))\n    );\n}\n\n/**\n * Calculate the next value for a string. 'a' becomes 'b'. 'A' becomes 'B'. 1\n * becomes 2, etc. If multiple character strings are passed, 'aa' would become\n * 'bb'.\n *\n * @function next\n * @param  {(string|number)} value - The string or number to convert.\n * @return {string} - The formatted string\n * @memberof Helpers.Value\n */\nexport function next(value) {\n    const converted = (value)\n        .toString()\n        .split('')\n        .map(char => stringFromCharCodeBy(char, (range, code) => {\n            return !range || code < range.max ? code + 1 : range.min\n        }))\n        .join('');\n\n    return format(converted, typeof value);\n}\n\n/**\n * Calculate the prev value for a string. 'b' becomes 'a'. 'B' becomes 'A'. 2\n * becomes 1, 0 becomes 9, etc. If multiple character strings are passed, 'bb'\n * would become 'aa'.\n *\n * @function prev\n * @param  {(string|number)} value - The string or number to convert.\n * @return {string} - The formatted string\n * @memberof Helpers.Value\n */\nexport function prev(value) {\n    const converted = (value)\n        .toString()\n        .split('')\n        .map(char => stringFromCharCodeBy(char, (range, code) => {\n            return !range || code > range.min ? code - 1 : range.max\n        }))\n        .join('');\n\n    return format(converted, typeof value);\n}\n","import Component from './Component';\nimport digitize from '../Helpers/Digitize';\nimport { next, prev } from '../Helpers/Value';\nimport { length, isObject, isNumber } from '../Helpers/Functions';\n\nexport default class FaceValue extends Component {\n\n    /**\n     * The `FaceValue` class handles all the digitizing for the `Face`.\n     *\n     * @class FaceValue\n     * @extends Component\n     * @param {*} value - The `FaceValue`'s actual value. Most likely should\n     *     string, number, or Date. But since the Face handles the value, it\n     *     could be anything.\n     * @param {(object|undefined)} [attributes] - The instance attributes.\n     */\n    constructor(value, attributes) {\n        super(Object.assign({\n            format: value => value,\n            prependLeadingZero: true,\n            minimumDigits: 0\n        }, attributes));\n\n        if(!this.value) {\n            this.value = value;\n        }\n    }\n\n    /**\n     * The `digits` attribute.\n     *\n     * @type {(Array|undefined)}\n     */\n    get digits() {\n        return this.$digits;\n    }\n\n    set digits(value) {\n        this.$digits = value;\n        this.minimumDigits = Math.max(this.minimumDigits, length(value));\n    }\n\n    /**\n     * The `value` attribute.\n     *\n     * @type {*}\n     */\n    get value() {\n        return this.$value;\n    }\n\n    set value(value) {\n        this.$value = value;\n        this.digits = digitize(this.format(value), {\n            minimumDigits: this.minimumDigits,\n            prependLeadingZero: this.prependLeadingZero\n        });\n    }\n\n    /**\n     * Returns `true` if the `value` attribute is not a number.\n     *\n     * @return {boolean} - `true` is the value is not a number.\n     */\n    isNaN() {\n        return isNaN(this.value);\n    }\n\n    /**\n     * Returns `true` if the `value` attribute is a number.\n     *\n     * @return {boolean} - `true` is the value is a number.\n     */\n    isNumber() {\n        return isNumber();\n    }\n\n    /**\n     * Clones the current `FaceValue` instance, but sets a new value to the\n     * cloned instance. Used for copying the current instance options and\n     * methods, but setting a new value.\n     *\n     * @param  {*} value - The n\n     * @param {(object|undefined)} [attributes] - The instance attributes.\n     * @return {FaceValue} - The cloned `FaceValue`.\n     */\n    clone(value, attributes) {\n        return new this.constructor(value, Object.assign(\n            this.getPublicAttributes(), attributes\n        ));\n    }\n\n    /**\n     * Define the name of the class.\n     *\n     * @return {string}\n     */\n    static defineName() {\n        return 'FaceValue';\n    }\n\n}\n","/**\n * @namespace Helpers.Validate\n */\nimport { isNull } from './Functions';\nimport { flatten } from './Functions';\nimport { isString } from './Functions';\nimport { isObject } from './Functions';\nimport { isFunction } from './Functions';\nimport { isConstructor } from './Functions';\n\n/**\n * Validate the data type of a variable.\n *\n * @function validate\n * @param {*} value - The value to validate.\n * @param {...*} args - The data types to use for validate.\n * @return {boolean} - Returns `true`is the value has a valid data type.\n * @memberof Helpers.Validate\n */\nexport default function validate(value, ...args) {\n    let success = false;\n\n    flatten(args).forEach(arg => {\n        if( (isNull(value) && isNull(arg)) ||\n            (isObject(arg) && (value instanceof arg)) ||\n            (isFunction(arg) && !isConstructor(arg) && arg(value) === true) ||\n            (isString(arg) && (typeof value === arg))) {\n            success = true;\n        }\n    });\n\n    return success;\n}\n","/**\n * @alias ConsoleMessages\n * @type {object}\n * @memberof module:Config/ConsoleMessages\n */\nexport default {\n    className: 'The className() is not defined.',\n    items: 'The items property must be an array.',\n    theme: 'The theme property must be an object.',\n    language: 'The language must be an object.',\n    date: 'The value must be an instance of a Date.',\n    face: 'The face must be an instance of a Face class.',\n    element: 'The element must be an instance of an HTMLElement',\n    faceValue: 'The face must be an instance of a FaceValue class.',\n    timer: 'The timer property must be an instance of a Timer class.'\n};\n","import Component from './Component';\nimport FaceValue from './FaceValue';\nimport validate from '../Helpers/Validate';\nimport ConsoleMessages from '../Config/ConsoleMessages';\nimport { error, isNull, isUndefined, isObject, isArray, isFunction, callback } from '../Helpers/Functions';\n\nexport default class Face extends Component {\n\n    /**\n     * This class is meant to be provide an interface for all other faces to\n     * extend.\n     *\n     * @class Face\n     * @extends Component\n     * @param {(FaceValue|object)} value - The `Face` value. If not an instance\n     *     of FaceValue, this argument is assumed to be the instance attributes.\n     * @param {(object|undefined)} [attributes] - The instance attributes.\n     */\n    constructor(value, attributes) {\n        if(!(value instanceof FaceValue) && isObject(value)) {\n            attributes = value;\n            value = undefined;\n        }\n\n        super();\n\n        this.setAttributes(Object.assign({\n            autoStart: true,\n            countdown: false,\n            animationRate: 500\n        }, this.defaultAttributes(), attributes || {}));\n\n        if(isNull(value) || isUndefined(value)) {\n            value = this.defaultValue();\n        }\n\n        if(value) {\n            this.value = value;\n        }\n    }\n\n    /**\n     * The `dataType` attribute.\n     *\n     * @type {*}\n     */\n    get dataType() {\n        return this.defaultDataType();\n    }\n\n    /**\n     * The `value` attribute.\n     *\n     * @type {*}\n     */\n    get value() {\n        return this.$value;\n    }\n\n    set value(value) {\n        if(!(value instanceof FaceValue)) {\n            value = this.createFaceValue(value);\n        }\n\n        this.$value = value;\n    }\n\n    /**\n     * The `stopAt` attribute.\n     *\n     * @type {*}\n     */\n    get stopAt() {\n        return this.$stopAt;\n    }\n\n    set stopAt(value) {\n        this.$stopAt = value;\n    }\n\n    /**\n     * The `originalValue` attribute.\n     *\n     * @type {*}\n     */\n    get originalValue() {\n        return this.$originalValue;\n    }\n\n    set originalValue(value) {\n        this.$originalValue = value;\n    }\n\n    /**\n     * This method is called with every interval, or every time the clock\n     * should change, and handles the actual incrementing and decrementing the\n     * clock's `FaceValue`.\n     *\n     * @param  {FlipClock} instance - The `FlipClock` instance.\n     * @param  {Function} fn - The interval callback.\n     * @return {Face} - This `Face` instance.\n     */\n    interval(instance, fn) {\n        if(this.countdown) {\n            this.decrement(instance);\n        }\n        else {\n            this.increment(instance);\n        }\n\n        callback.call(this, fn);\n\n        if(this.shouldStop(instance)) {\n            instance.stop();\n        }\n\n        return this.emit('interval');\n    }\n\n    /**\n     * Determines if the clock should stop or not.\n     *\n     * @param  {FlipClock} instance - The `FlipClock` instance.\n     * @return {boolean} - Returns `true` if the clock should stop.\n     */\n    shouldStop(instance) {\n        return !isUndefined(this.stopAt) ? this.stopAt === instance.value.value : false;\n    }\n\n    /**\n     * By default this just returns the value unformatted.\n     *\n     * @param  {FlipClock} instance - The `FlipClock` instance.\n     * @param  {*} value - The value to format.\n     * @return {*} - The formatted value.\n     */\n    format(instance, value) {\n        return value;\n    }\n\n    /**\n     * The default value for the `Face`.\n     *\n     * @return {*} - The default value.\n     */\n    defaultValue() {\n        //\n    }\n\n    /**\n     * The default attributes for the `Face`.\n     *\n     * @return {(Object|undefined)} - The default attributes.\n     */\n    defaultAttributes() {\n        //\n    }\n\n    /**\n     * The default data type for the `Face` value.\n     *\n     * @return {(Object|undefined)} - The default data type.\n     */\n    defaultDataType() {\n        //\n    }\n\n    /**\n     * Increment the clock.\n     *\n     * @param  {FlipClock} instance - The `FlipClock` instance.\n     * @param  {Number} [amount] - The amount to increment. If the amount is not\n     *     defined, it is left up to the `Face` to determine the default value.\n     * @return {void}\n     */\n    increment(instance, amount) {\n        //\n    }\n\n    /**\n     * Decrement the clock.\n     *\n     * @param  {FlipClock} instance - The `FlipClock` instance.\n     * @param  {Number} [amount] - The amount to decrement. If the amount is not\n     *     defined, it is left up to the `Face` to determine the default value.\n     * @return {void}\n     */\n    decrement(instance, amount) {\n        //\n    }\n\n    /**\n     * This method is called right after clock has started.\n     *\n     * @param  {FlipClock} instance - The `FlipClock` instance.\n     * @return {void}\n     */\n    started(instance) {\n        //\n    }\n\n    /**\n     * This method is called right after clock has stopped.\n     *\n     * @param  {FlipClock} instance - The `FlipClock` instance.\n     * @return {void}\n     */\n    stopped(instance) {\n        //\n    }\n\n    /**\n     * This method is called right after clock has reset.\n     *\n     * @param  {FlipClock} instance - The `FlipClock` instance.\n     * @return {void}\n     */\n    reset(instance) {\n        //\n    }\n\n    /**\n     * This method is called right after `Face` has initialized.\n     *\n     * @param  {FlipClock} instance - The `FlipClock` instance.\n     * @return {void}\n     */\n    initialized(instance) {\n        //\n    }\n\n    /**\n     * This method is called right after `Face` has rendered.\n     *\n     * @param  {FlipClock} instance - The `FlipClock` instance.\n     * @return {void}\n     */\n    rendered(instance) {\n        //\n    }\n\n    /**\n     * This method is called right after `Face` has mounted.\n     *\n     * @param  {FlipClock} instance - The `FlipClock` instance.\n     * @return {void}\n     */\n    mounted(instance) {\n        if(this.autoStart && instance.timer.isStopped) {\n            window.requestAnimationFrame(() => instance.start(instance));\n        }\n    }\n\n    /**\n     * Helper method to instantiate a new `FaceValue`.\n     *\n     * @param  {FlipClock} instance - The `FlipClock` instance.\n     * @param  {object|undefined} [attributes] - The attributes passed to the\n     *     `FaceValue` instance.\n     * @return {Divider} - The instantiated `FaceValue`.\n     */\n    createFaceValue(instance, value) {\n        return FaceValue.make(\n            isFunction(value) && !value.name ? value() : value, {\n                minimumDigits: this.minimumDigits,\n                format: value => this.format(instance, value)\n            }\n        );\n    }\n\n}\n","/**\n * @classdesc Arabic Language Pack\n * @desc This class will be used to translate tokens into the Arabic language.\n * @namespace Languages.Arabic\n */\n\n/**\n * @constant dictionary\n * @type {object}\n * @memberof Languages.Arabic\n */\nexport const dictionary = {\n    'years'   : 'سنوات',\n    'months'  : 'شهور',\n    'days'    : 'أيام',\n    'hours'   : 'ساعات',\n    'minutes' : 'دقائق',\n    'seconds' : 'ثواني'\n};\n\n/**\n * @constant aliases\n * @type {array}\n * @memberof Languages.Arabic\n */\nexport const aliases = ['ar', 'ar-ar', 'arabic'];\n","/**\n * @classdesc Catalan Language Pack\n * @desc This class will used to translate tokens into the Catalan language.\n * @namespace Languages.Catalan\n */\n\n/**\n * @constant dictionary\n * @type {object}\n * @memberof Languages.Catalan\n */\nexport const dictionary = {\n    'years' : 'Anys',\n    'months' : 'Mesos',\n    'days' : 'Dies',\n    'hours' : 'Hores',\n    'minutes' : 'Minuts',\n    'seconds' : 'Segons'\n};\n\n/**\n * @constant aliases\n * @type {array}\n * @memberof Languages.Catalan\n */\nexport const aliases = ['ca', 'ca-es', 'catalan'];\n","/**\n * @classdesc Czech Language Pack\n * @desc This class will used to translate tokens into the Czech language.\n * @namespace Languages.Czech\n */\n\n/**\n * @constant dictionary\n * @type {object}\n * @memberof Languages.Czech\n */\nexport const dictionary = {\n    'years'   : 'Roky',\n    'months'  : 'Měsíce',\n    'days'    : 'Dny',\n    'hours'   : 'Hodiny',\n    'minutes' : 'Minuty',\n    'seconds' : 'Sekundy'\n};\n\n/**\n * @constant aliases\n * @type {array}\n * @memberof Languages.Czech\n */\nexport const aliases = ['cs', 'cs-cz', 'cz', 'cz-cs', 'czech'];\n","/**\n * @classdesc Danish Language Pack\n * @desc This class will used to translate tokens into the Danish language.\n * @namespace Languages.Danish\n */\n\n/**\n * @constant dictionary\n * @type {object}\n * @memberof Languages.Danish\n */\nexport const dictionary = {\n\t'years'   : 'År',\n\t'months'  : 'Måneder',\n\t'days'    : 'Dage',\n\t'hours'   : 'Timer',\n\t'minutes' : 'Minutter',\n\t'seconds' : 'Sekunder'\n};\n\n/**\n * @constant aliases\n * @type {array}\n * @memberof Languages.Danish\n */\nexport const aliases = ['da', 'da-dk', 'danish'];\n","/**\n * @classdesc German Language Pack\n * @desc This class will used to translate tokens into the German language.\n * @namespace Languages.German\n */\n\n/**\n * @constant dictionary\n * @type {object}\n * @memberof Languages.German\n */\nexport const dictionary = {\n\t'years'   : 'Jahre',\n\t'months'  : 'Monate',\n\t'days'    : 'Tage',\n\t'hours'   : 'Stunden',\n\t'minutes' : 'Minuten',\n\t'seconds' : 'Sekunden'\n};\n\n/**\n * @constant aliases\n * @type {array}\n * @memberof Languages.German\n */\nexport const aliases = ['de', 'de-de', 'german'];\n","/**\n * @classdesc English Language Pack\n * @desc This class will used to translate tokens into the English language.\n * @namespace Languages.English\n */\n\n/**\n * @constant dictionary\n * @type {object}\n * @memberof Languages.English\n */\nexport const dictionary = {\n\t'years'   : 'Years',\n\t'months'  : 'Months',\n\t'days'    : 'Days',\n\t'hours'   : 'Hours',\n\t'minutes' : 'Minutes',\n\t'seconds' : 'Seconds'\n};\n\n/**\n * @constant aliases\n * @type {array}\n * @memberof Languages.English\n */\nexport const aliases = ['en', 'en-us', 'english'];\n","/**\n * @classdesc Spanish Language Pack\n * @desc This class will used to translate tokens into the Spanish language.\n * @namespace Languages.Spanish\n */\n\n/**\n * @constant dictionary\n * @type {object}\n * @memberof Languages.Spanish\n */\nexport const dictionary = {\n\t'years'   : 'Años',\n\t'months'  : 'Meses',\n\t'days'    : 'Días',\n\t'hours'   : 'Horas',\n\t'minutes' : 'Minutos',\n\t'seconds' : 'Segundos'\n};\n\n/**\n * @constant aliases\n * @type {array}\n * @memberof Languages.Spanish\n */\nexport const aliases = ['es', 'es-es', 'spanish'];\n","/**\n * @classdesc Persian Language Pack\n * @desc This class will used to translate tokens into the Persian language.\n * @namespace Languages.Persian\n */\n\n/**\n * @constant dictionary\n * @type {object}\n * @memberof Languages.Persian\n */\nexport const dictionary = {\n\t'years'   : 'سال',\n\t'months'  : 'ماه',\n\t'days'    : 'روز',\n\t'hours'   : 'ساعت',\n\t'minutes' : 'دقیقه',\n\t'seconds' : 'ثانیه'\n};\n\n/**\n * @constant aliases\n * @type {array}\n * @memberof Languages.Persian\n */\nexport const aliases = ['fa', 'fa-ir', 'persian'];\n","/**\n * @classdesc Finnish Language Pack\n * @desc This class will used to translate tokens into the Finnish language.\n * @namespace Languages.Finnish\n */\n\n/**\n * @constant dictionary\n * @type {object}\n * @memberof Languages.Finnish\n */\nexport const dictionary = {\n\t'years'   : 'Vuotta',\n\t'months'  : 'Kuukautta',\n\t'days'    : 'Päivää',\n\t'hours'   : 'Tuntia',\n\t'minutes' : 'Minuuttia',\n\t'seconds' : 'Sekuntia'\n};\n\n/**\n * @constant aliases\n * @type {array}\n * @memberof Languages.Finnish\n */\nexport const aliases = ['fi', 'fi-fi', 'finnish'];\n","/**\n * @classdesc Canadian French Language Pack\n * @desc This class will used to translate tokens into the Canadian French language.\n * @namespace Languages.CanadianFrench\n */\n\n/**\n * @constant dictionary\n * @type {object}\n * @memberof Languages.CanadianFrench\n */\nexport const dictionary = {\n    'years'   : 'Ans',\n    'months'  : 'Mois',\n    'days'    : 'Jours',\n    'hours'   : 'Heures',\n    'minutes' : 'Minutes',\n    'seconds' : 'Secondes'\n};\n\n/**\n * @constant aliases\n * @type {array}\n * @memberof Languages.CanadianFrench\n */\nexport const aliases = ['fr', 'fr-ca', 'french'];\n","/**\n * @classdesc Hebrew Language Pack\n * @desc This class will used to translate tokens into the Hebrew language.\n * @namespace Languages.Hebrew\n */\n\n/**\n * @constant dictionary\n * @type {object}\n * @memberof Languages.Hebrew\n */\nexport const dictionary = {\n\t'years'   : 'שנים',\n\t'months'  : 'חודש',\n\t'days'    : 'ימים',\n\t'hours'   : 'שעות',\n\t'minutes' : 'דקות',\n\t'seconds' : 'שניות'\n};\n\n/**\n * @constant aliases\n * @type {array}\n * @memberof Languages.Hebrew\n */\nexport const aliases = ['il', 'he-il', 'hebrew'];\n","/**\n * @classdesc Hungarian Language Pack\n * @desc This class will used to translate tokens into the Hungarian language.\n * @namespace Languages.Hungarian\n */\n\n/**\n * @constant dictionary\n * @type {object}\n * @memberof Languages.Hungarian\n */\nexport const dictionary = {\n\t'years'   : 'Év',\n    'months'  : 'Hónap',\n    'days'    : 'Nap',\n    'hours'   : 'Óra',\n    'minutes' : 'Perc',\n    'seconds' : 'Másodperc'\n};\n\n/**\n * @constant aliases\n * @type {array}\n * @memberof Languages.Hungarian\n */\nexport const aliases = ['hu', 'hu-hu', 'hungarian'];\n","/**\n * @classdesc Italian Language Pack\n * @desc This class will used to translate tokens into the Italian language.\n * @namespace Languages.Italian\n */\n\n/**\n * @constant dictionary\n * @type {object}\n * @memberof Languages.Italian\n */\nexport const dictionary = {\n\t'years'   : 'Anni',\n\t'months'  : 'Mesi',\n\t'days'    : 'Giorni',\n\t'hours'   : 'Ore',\n\t'minutes' : 'Minuti',\n\t'seconds' : 'Secondi'\n};\n\n/**\n * @constant aliases\n * @type {array}\n * @memberof Languages.Italian\n */\nexport const aliases = ['da', 'da-dk', 'danish'];\n","/**\n * @classdesc Japanese Language Pack\n * @desc This class will used to translate tokens into the Japanese language.\n * @namespace Languages.Japanese\n */\n\n/**\n * @constant dictionary\n * @type {object}\n * @memberof Languages.Japanese\n */\nexport const dictionary = {\n\t'years'   : '年',\n\t'months'  : '月',\n\t'days'    : '日',\n\t'hours'   : '時',\n\t'minutes' : '分',\n\t'seconds' : '秒'\n};\n\n/**\n * @constant aliases\n * @type {array}\n * @memberof Languages.Japanese\n */\nexport const aliases = ['jp', 'ja-jp', 'japanese'];\n","/**\n * @classdesc Korean Language Pack\n * @desc This class will used to translate tokens into the Korean language.\n * @namespace Languages.Korean\n */\n\n/**\n * @constant dictionary\n * @type {object}\n * @memberof Languages.Korean\n */\nexport const dictionary = {\n\t'years'   : '년',\n\t'months'  : '월',\n\t'days'    : '일',\n\t'hours'   : '시',\n\t'minutes' : '분',\n\t'seconds' : '초'\n};\n\n/**\n * @constant aliases\n * @type {array}\n * @memberof Languages.Korean\n */\nexport const aliases = ['ko', 'ko-kr', 'korean'];\n","/**\n * @classdesc Latvian Language Pack\n * @desc This class will used to translate tokens into the Latvian language.\n * @namespace Languages.Latvian\n */\n\n/**\n * @constant dictionary\n * @type {object}\n * @memberof Languages.Latvian\n */\nexport const dictionary = {\n    'years'   : 'Gadi',\n    'months'  : 'Mēneši',\n    'days'    : 'Dienas',\n    'hours'   : 'Stundas',\n    'minutes' : 'Minūtes',\n    'seconds' : 'Sekundes'\n};\n\n/**\n * @constant aliases\n * @type {array}\n * @memberof Languages.Latvian\n */\nexport const aliases = ['lv', 'lv-lv', 'latvian'];\n","/**\n * @classdesc Dutch Language Pack\n * @desc This class will used to translate tokens into the Dutch language.\n * @namespace Languages.Dutch\n */\n\n/**\n * @constant dictionary\n * @type {object}\n * @memberof Languages.Dutch\n */\nexport const dictionary = {\n    'years'   : 'Jaren',\n    'months'  : 'Maanden',\n    'days'    : 'Dagen',\n    'hours'   : 'Uren',\n    'minutes' : 'Minuten',\n    'seconds' : 'Seconden'\n};\n\n/**\n * @constant aliases\n * @type {array}\n * @memberof Languages.Dutch\n */\nexport const aliases = ['nl', 'nl-be', 'dutch'];\n","/**\n * @classdesc Norwegian-Bokmål Language Pack\n * @desc This class will used to translate tokens into the Norwegian-Bokmål language.\n * @namespace Languages.Norwegian\n */\n\n/**\n * @constant dictionary\n * @type {object}\n * @memberof Languages.Norwegian\n */\nexport const dictionary = {\n\t'years'   : 'År',\n\t'months'  : 'Måneder',\n\t'days'    : 'Dager',\n\t'hours'   : 'Timer',\n\t'minutes' : 'Minutter',\n\t'seconds' : 'Sekunder'\n};\n\n/**\n * @constant aliases\n * @type {array}\n * @memberof Languages.Norwegian\n */\nexport const aliases = ['no', 'nb', 'no-nb', 'norwegian'];\n","/**\n * @classdesc Polish Language Pack\n * @desc This class will used to translate tokens into the Polish language.\n * @namespace Languages.Polish\n */\n\n/**\n * @constant dictionary\n * @type {object}\n * @memberof Languages.Polish\n */\nexport const dictionary = {\n\t'years'   : 'Lat',\n\t'months'  : 'Miesięcy',\n\t'days'    : 'Dni',\n\t'hours'   : 'Godziny',\n\t'minutes' : 'Minuty',\n\t'seconds' : 'Sekundy'\n};\n\n/**\n * @constant aliases\n * @type {array}\n * @memberof Languages.Polish\n */\nexport const aliases = ['pl', 'pl-pl', 'polish'];\n","/**\n * @classdesc Portuguese Language Pack\n * @desc This class will used to translate tokens into the Portuguese language.\n * @namespace Languages.Portuguese\n */\n\n/**\n * @constant dictionary\n * @type {object}\n * @memberof Languages.Portuguese\n */\nexport const dictionary = {\n\t'years'   : 'Anos',\n\t'months'  : 'Meses',\n\t'days'    : 'Dias',\n\t'hours'   : 'Horas',\n\t'minutes' : 'Minutos',\n\t'seconds' : 'Segundos'\n};\n\n/**\n * @constant aliases\n * @type {array}\n * @memberof Languages.Portuguese\n */\nexport const aliases = ['pt', 'pt-br', 'portuguese'];\n","/**\n * @classdesc Romanian Language Pack\n * @desc This class will used to translate tokens into the Romanian language.\n * @namespace Languages.Romanian\n */\n\n/**\n * @constant dictionary\n * @type {object}\n * @memberof Languages.Romanian\n */\nexport const dictionary = {\n\t'years': 'Ani',\n\t'months': 'Luni',\n\t'days': 'Zile',\n\t'hours': 'Ore',\n\t'minutes': 'Minute',\n\t'seconds': 'sSecunde'\n};\n\n/**\n * @constant aliases\n * @type {array}\n * @memberof Languages.Romanian\n */\nexport const aliases = ['ro', 'ro-ro', 'romana'];\n","/**\n * @classdesc Russian Language Pack\n * @desc This class will used to translate tokens into the Russian language.\n * @namespace Languages.Russian\n */\n\n/**\n * @constant dictionary\n * @type {object}\n * @memberof Languages.Russian\n */\nexport const dictionary = {\n    'years'   : 'лет',\n    'months'  : 'месяцев',\n    'days'    : 'дней',\n    'hours'   : 'часов',\n    'minutes' : 'минут',\n    'seconds' : 'секунд'\n};\n\n/**\n * @constant aliases\n * @type {array}\n * @memberof Languages.Russian\n */\nexport const aliases = ['ru', 'ru-ru', 'russian'];\n","/**\n * @classdesc Slovak Language Pack\n * @desc This class will used to translate tokens into the Slovak language.\n * @namespace Languages.Slovak\n */\n\n/**\n * @constant dictionary\n * @type {object}\n * @memberof Languages.Slovak\n */\nexport const dictionary = {\n\t'years'   : 'Roky',\n\t'months'  : 'Mesiace',\n\t'days'    : 'Dni',\n\t'hours'   : 'Hodiny',\n\t'minutes' : 'Minúty',\n\t'seconds' : 'Sekundy'\n};\n\n/**\n * @constant aliases\n * @type {array}\n * @memberof Languages.Slovak\n */\nexport const aliases = ['sk', 'sk-sk', 'slovak'];\n","/**\n * @classdesc Swedish Language Pack\n * @desc This class will used to translate tokens into the Swedish language.\n * @namespace Languages.Swedish\n */\n\n/**\n * @constant dictionary\n * @type {object}\n * @memberof Languages.Swedish\n */\nexport const dictionary = {\n\t'years'   : 'År',\n\t'months'  : 'Månader',\n\t'days'    : 'Dagar',\n\t'hours'   : 'Timmar',\n\t'minutes' : 'Minuter',\n\t'seconds' : 'Sekunder'\n};\n\n/**\n * @constant aliases\n * @type {array}\n * @memberof Languages.Swedish\n */\nexport const aliases = ['sv', 'sv-se', 'swedish'];\n","/**\n * @classdesc Thai Language Pack\n * @desc This class will used to translate tokens into the Thai language.\n * @namespace Languages.Thai\n */\n\n/**\n * @constant dictionary\n * @type {object}\n * @memberof Languages.Thai\n */\nexport const dictionary = {\n\t'years'   : 'ปี',\n\t'months'  : 'เดือน',\n\t'days'    : 'วัน',\n\t'hours'   : 'ชั่วโมง',\n\t'minutes' : 'นาที',\n\t'seconds' : 'วินาที'\n};\n\n/**\n * @constant aliases\n * @type {array}\n * @memberof Languages.Thai\n */\nexport const aliases = ['th', 'th-th', 'thai'];\n","/**\n * @classdesc Turkish Language Pack\n * @desc This class will used to translate tokens into the Turkish language.\n * @namespace Languages.Turkish\n */\n\n/**\n * @constant dictionary\n * @type {object}\n * @memberof Languages.Turkish\n */\nexport const dictionary = {\n\t'years'   : 'Yıl',\n\t'months'  : 'Ay',\n\t'days'    : 'Gün',\n\t'hours'   : 'Saat',\n\t'minutes' : 'Dakika',\n\t'seconds' : 'Saniye'\n};\n\n/**\n * @constant aliases\n * @type {array}\n * @memberof Languages.Turkish\n */\nexport const aliases = ['tr', 'tr-tr', 'turkish'];\n","/**\n * @classdesc Ukrainian Language Pack\n * @desc This class will used to translate tokens into the Ukrainian language.\n * @namespace Languages.Ukrainian\n */\n\n/**\n * @constant dictionary\n * @type {object}\n * @memberof Languages.Ukrainian\n */\nexport const dictionary = {\n    'years'   : 'роки',\n    'months'  : 'місяці',\n    'days'    : 'дні',\n    'hours'   : 'години',\n    'minutes' : 'хвилини',\n    'seconds' : 'секунди'\n};\n\n/**\n * @constant aliases\n * @type {array}\n * @memberof Languages.Ukrainian\n */\nexport const aliases = ['ua', 'ua-ua', 'ukraine'];\n","/**\n * @classdesc Vietnamese Language Pack\n * @desc This class will used to translate tokens into the Vietnamese language.\n * @namespace Languages.Vietnamese\n */\n\n/**\n * @constant dictionary\n * @type {object}\n * @memberof Languages.Vietnamese\n */\nexport const dictionary = {\n\t'years'   : 'Năm',\n\t'months'  : 'Tháng',\n\t'days'    : 'Ngày',\n\t'hours'   : 'Giờ',\n\t'minutes' : 'Phút',\n\t'seconds' : 'Giây'\n};\n\n/**\n * @constant aliases\n * @type {array}\n * @memberof Languages.Vietnamese\n */\nexport const aliases = ['vn', 'vn-vn', 'vietnamese'];\n","/**\n * @classdesc Chinese Language Pack\n * @desc This class will used to translate tokens into the Chinese language.\n * @namespace Languages.Chinese\n */\n\n/**\n * @constant dictionary\n * @type {object}\n * @memberof Languages.Chinese\n */\nexport const dictionary = {\n\t'years'   : '年',\n\t'months'  : '月',\n\t'days'    : '日',\n\t'hours'   : '时',\n\t'minutes' : '分',\n\t'seconds' : '秒'\n};\n\n/**\n * @constant aliases\n * @type {array}\n * @memberof Languages.Chinese\n */\nexport const aliases = ['zh', 'zh-cn', 'chinese'];\n","/**\n * @classdesc Traditional Chinese Language Pack\n * @desc This class will used to translate tokens into the Traditional Chinese language.\n * @namespace Languages.TraditionalChinese\n */\n\n/**\n * @constant dictionary\n * @type {object}\n * @memberof Languages.TraditionalChinese\n */\nexport const dictionary = {\n\t'years'   : '年',\n\t'months'  : '月',\n\t'days'    : '日',\n\t'hours'   : '時',\n\t'minutes' : '分',\n\t'seconds' : '秒'\n};\n\n/**\n * @constant aliases\n * @type {array}\n * @memberof Languages.TraditionalChinese\n */\nexport const aliases = ['zh-tw'];\n","/**\n * @namespace Helpers.Language\n */\nimport * as LANGUAGES from '../Languages';\n\n/**\n * Return the language associated with the key. Returns `null` if no language is\n * found.\n * \n * @function language\n * @param  {string} name - The name or id of the language.\n * @return {object|null} - The language dictionary, or null if not found.\n * @memberof Helpers.Language\n */\nexport default function language(name) {\n    return name ? LANGUAGES[name.toLowerCase()] || Object.values(LANGUAGES).find(value => {\n        return value.aliases.indexOf(name) !== -1;\n    }) : null;\n}\n","/**\n * A collection of functions to manage DOM nodes and theme templates.\n *\n * @namespace Helpers.Template\n */\nimport { noop } from './Functions';\nimport { isArray } from './Functions';\nimport { isObject } from './Functions';\nimport { isString } from './Functions';\nimport { deepFlatten } from './Functions';\n\n/**\n * Swap a new DOM node with an existing one.\n *\n * @function swap\n * @param  {HTMLElement} subject - The new DOM node.\n * @param  {HTMLElement} existing - The existing DOM node.\n * @return {HTMLElement} - Returns the new element if it was mounted, otherwise\n *    the existing node is returned.\n * @memberof Helpers.Template\n */\nexport function swap(subject, existing) {\n\tif(existing.parentNode) {\n\t\texisting.parentNode.replaceChild(subject, existing);\n\n\t\treturn subject;\n\t}\n\n\treturn existing;\n}\n\n/**\n * Set the attribute of an element.\n *\n * @function setAttributes\n * @param  {HTMLElement} el - The DOM node that will receive the attributes.\n * @param  {Object|undefined} [attributes] - The attribute object, or if no object\n *     is passed, then the action is ignored.\n * @return {HTMLElement} el - The DOM node that received the attributes.\n * @memberof Helpers.Template\n */\nexport function setAttributes(el, attributes) {\n\tif(isObject(attributes)) {\n\t\tfor(const i in attributes) {\n\t\t\tel.setAttribute(i, attributes[i]);\n\t\t}\n\t}\n\n\treturn el;\n}\n\n/**\n * Append an array of DOM nodes to a parent.\n *\n * @function appendChildren\n * @param  {HTMLElement} el - The parent DOM node.\n * @param  {Array|undefined} [children] - The array of children. If no array\n *     is passed, then the method silently fails to run.\n * @return {HTMLElement} el - The DOM node that received the attributes.\n * @memberof Helpers.Template\n */\nexport function appendChildren(el, children) {\n\tif(isArray(children)) {\n\t\tchildren.filter(noop).forEach(child => {\n\t\t\tif(child instanceof HTMLElement) {\n\t\t\t\tel.appendChild(child);\n\t\t\t}\n\t\t});\n\t}\n\n\treturn el;\n}\n\n/**\n * Create a new HTMLElement instance.\n *\n * @function createElement\n * @param  {HTMLElement} el - The parent DOM node.\n * @param  {Array|undefined} [children] - The array of children. If no array\n *     is passed, then the method silently fails to run.\n * @param  {Object|undefined} [attributes] - The attributes object.\n * @return {HTMLElement} el - The DOM node that received the attributes.\n * @memberof Helpers.Template\n */\nexport function createElement(el, children, attributes) {\n\tif(!(el instanceof HTMLElement)) {\n\t\tel = document.createElement(el);\n\t}\n\n\tsetAttributes(el, isObject(children) ? children : attributes);\n\n\tif(!isObject(children) && !isArray(children)) {\n\t\tel.innerHTML = children;\n\t}\n\telse {\n\t\tappendChildren(el, children)\n\t}\n\n\treturn el;\n}\n","import Component from './Component';\nimport language from '../Helpers/Language';\nimport validate from '../Helpers/Validate';\nimport translate from '../Helpers/Translate';\nimport { isString } from '../Helpers/Functions';\nimport ConsoleMessages from '../Config/ConsoleMessages';\nimport { error, kebabCase } from '../Helpers/Functions';\nimport { swap, createElement } from '../Helpers/Template';\n\nexport default class DomComponent extends Component {\n\n    /**\n     * An abstract class that all other DOM components can extend.\n     *\n     * @class DomComponent\n     * @extends Component\n     * @param {(object|undefined)} [attributes] - The instance attributes.\n     */\n    constructor(attributes) {\n        super(Object.assign({\n            parent: null\n        }, attributes));\n\n        if(!this.theme) {\n            error(`${this.name} does not have a theme defined.`);\n        }\n\n        if(!this.language) {\n            error(`${this.name} does not have a language defined.`);\n        }\n\n\t\tif(!this.theme[this.name]) {\n            throw new Error(\n                `${this.name} cannot be rendered because it has no template.`\n            );\n        }\n    }\n\n    /**\n     * The `className` attribute. Used for CSS.\n     *\n     * @type {string}\n     */\n    get className() {\n        return kebabCase(this.constructor.defineName());\n    }\n\n    /**\n     * The `el` attribute.\n     *\n     * @type {HTMLElement}\n     */\n    get el() {\n        return this.$el;\n    }\n\n    set el(value) {\n        if(!validate(value, null, HTMLElement)) {\n            error(ConsoleMessages.element);\n        }\n\n        this.$el = value;\n    }\n\n    /**\n     * The `parent` attribute. Parent is set when `DomComponent` instances are\n     * mounted.\n     *\n     * @type {DomComponent}\n     */\n    get parent() {\n        return this.$parent;\n    }\n\n    set parent(parent) {\n        this.$parent = parent;\n    }\n\n    /**\n     * The `theme` attribute.\n     *\n     * @type {object}\n     */\n    get theme() {\n        return this.$theme;\n    }\n\n    set theme(value) {\n        if(!validate(value, 'object')) {\n            error(ConsoleMessages.value);\n        }\n\n        this.$theme = value;\n    }\n\n    /**\n     * Get the language attribute.\n     *\n     * @type {object}\n     */\n    get language() {\n        return this.$language;\n    }\n\n    set language(value) {\n        if(isString(value)) {\n            value = language(value);\n        }\n\n        if(!validate(value, 'object')) {\n            error(ConsoleMessages.language);\n        }\n\n        this.$language = value;\n    }\n\n    /**\n     * Translate a string.\n     *\n     * @param  {string} string - The string to translate.\n     * @return {string} - The translated string. If no tranlation found, the\n     *     untranslated string is returned.\n     */\n    translate(string) {\n        return translate(string, this.language);\n    }\n\n    /**\n     * Alias to translate(string);\n     *\n     * @alias DomComponent.translate\n     */\n    t(string) {\n        return this.translate(string);\n    }\n\n    /**\n     * Render the DOM component.\n     *\n     * @return {HTMLElement} - The `el` attribute.\n     */\n\trender() {\n        const el = createElement('div', {\n            class: this.className === 'flip-clock' ? this.className : 'flip-clock-' + this.className\n        });\n\n        this.theme[this.name](el, this);\n\n        if(!this.el) {\n            this.el = el;\n        }\n        else if(this.el.innerHTML !== el.innerHTML) {\n            this.el = swap(el, this.el);\n        }\n\n        return this.el;\n\t}\n\n    /**\n     * Mount a DOM component to a parent node.\n     *\n     * @param  {HTMLElement} parent - The parent DOM node.\n     * @param  {(false|HTMLElement)} [before=false] - If `false`, element is\n     *     appended to the parent node. If an instance of an `HTMLElement`,\n     *     the component will be inserted before the specified element.\n     * @return {HTMLElement} - The `el` attribute.\n     */\n    mount(parent, before = false) {\n        this.render();\n        this.parent = parent;\n\n        if(!before) {\n            this.parent.appendChild(this.el);\n        }\n        else {\n            this.parent.insertBefore(this.el, before);\n        }\n\n        return this.el;\n    }\n\n}\n","/**\n * @namespace Helpers.Translate\n */\nimport language from './Language';\nimport { isString } from './Functions';\n\n/**\n * Translate an English string into another language.\n * \n * @function translate\n * @param {string} string - The string to translate.\n * @param {(string|object)} from - The language used to translate. If a string,\n *     the language is loaded into an object.\n * @return {string} - If no diction key is found, the untranslated string is\n *     returned.\n * @memberof Helpers.Translate\n */\nexport default function translate(string, from) {\n    const lang = isString(from) ? language(from) : from;\n    const dictionary = lang.dictionary || lang;\n    return dictionary[string] || string;\n};\n","import DomComponent from './DomComponent';\n\n/**\n * Create a new `Divider` instance.\n *\n * The purpose of this class is to return a unique class name so the theme can\n * render it appropriately, since each `DomComponent` can receive its own template\n * from the theme.\n *\n * @class Divider\n * @extends DomComponent\n * @param {(object|undefined)} [attributes] - The instance attributes.\n */\nexport default class Divider extends DomComponent {\n\n    /**\n     * Define the name of the class.\n     *\n     * @return {string}\n     */\n    static defineName() {\n        return 'Divider';\n    }\n\n}\n","import DomComponent from './DomComponent';\nimport { isObject } from '../Helpers/Functions';\n\nexport default class ListItem extends DomComponent {\n\n    /**\n     * This class is used to represent a single digits in a `List`.\n     *\n     * @class ListItem\n     * @extends DomComponent\n     * @param {(Number|String)} value - The value of the `ListItem`.\n     * @param {object|undefined} [attributes] - The instance attributes.\n     */\n    constructor(value, attributes) {\n        super(Object.assign({\n            value: value\n        }, isObject(value) ? value : null, attributes));\n    }\n\n    /**\n     * Define the name of the class.\n     *\n     * @return {string}\n     */\n    static defineName() {\n        return 'ListItem';\n    }\n\n}\n","import Divider from './Divider';\nimport ListItem from './ListItem';\nimport DomComponent from './DomComponent';\nimport { next, prev,  } from '../Helpers/Value';\nimport { isObject,  } from '../Helpers/Functions';\n\nexport default class List extends DomComponent {\n\n    /**\n     * This class is used to add a digit to the clock face. This class is called\n     * `List` because it contains a list of `ListItem`'s which are used to\n     * create flip effects. In the context of FlipClock.js a `List` represents\n     * one single digit.\n     *\n     * @class List\n     * @extends DomComponent\n     * @param {Number|String|Object} label - The active value. If an object, it\n     * is assumed that it is the instance attributes.\n     * @param {object|undefined} [attributes] - The instance attributes.\n     */\n    constructor(value, attributes) {\n        super(Object.assign({\n            value: value,\n            items: [],\n        }, isObject(value) ? value : null, attributes));\n    }\n\n    /**\n     * Get the `value` attribute.\n     *\n     * @type {(Number|String)}\n     */\n    get value() {\n        return this.$value;\n    }\n    set value(value) {\n        this.$value = value;\n    }\n\n    /**\n     * Get the `items` attribute.\n     *\n     * @type {(Number|String)}\n     */\n    get items() {\n        return this.$items;\n    }\n\n    set items(value) {\n        this.$items = value;\n    }\n\n    /**\n     * Helper method to instantiate a new `ListItem`.\n     *\n     * @param  {(Number|String)} value - The `ListItem` value.\n     * @param  {(Object|undefined)} [attributes] - The instance attributes.\n     * @return {ListItem} - The instantiated `ListItem`.\n     */\n    createListItem(value, attributes) {\n        const item = new ListItem(value, Object.assign({\n            theme: this.theme,\n            language: this.language\n        }, attributes));\n\n        this.$items.push(item);\n\n        return item;\n    }\n\n    /**\n     * Define the name of the class.\n     *\n     * @return {string}\n     */\n    static defineName() {\n        return 'List';\n    }\n\n}\n","import DomComponent from './DomComponent';\nimport { isObject, isArray } from '../Helpers/Functions';\n\nexport default class Group extends DomComponent {\n\n    /**\n     * This class is used to group values within a clock face. How the groups\n     * are displayed is determined by the theme.\n     *\n     * @class Group\n     * @extends DomComponent\n     * @param {Array|Object} items - An array `List` instances or an object of\n     *     attributes. If not an array, assumed to be the attributes.\n     * @param {object|undefined} [attributes] - The instance attributes.\n     */\n    constructor(items, attributes) {\n        super(Object.assign({\n            items: isArray(items) ? items : []\n        }, (isObject(items) ? items : null), attributes));\n    }\n\n    /**\n     * Define the name of the class.\n     *\n     * @return {string}\n     */\n    static defineName() {\n        return 'Group';\n    }\n\n}\n","import DomComponent from './DomComponent';\nimport { isObject } from '../Helpers/Functions';\n\nexport default class Label extends DomComponent {\n\n    /**\n     * This class is used to add a label to the clock face.\n     *\n     * @class Label\n     * @extends DomComponent\n     * @param {Number|String|Object} label - The label attribute. If an object,\n     *     it is assumed that it is the instance attributes.\n     * @param {object|undefined} [attributes] - The instance attributes.\n     */\n    constructor(label, attributes) {\n        super(Object.assign({\n            label: label\n        }, (isObject(label) ? label : null), attributes));\n    }\n\n    /**\n     * Define the name of the class.\n     *\n     * @return {string}\n     */\n    static defineName() {\n        return 'Label';\n    }\n\n}\n","import Component from './Component';\nimport { isObject, isNumber, callback } from '../Helpers/Functions';\n\nexport default class Timer extends Component {\n\n    /**\n     * Create a new `Timer` instance.\n     *\n     * @class Timer\n     * @extends Component\n     * @param {(Object|Number)} interval - The interval passed as a `Number`,\n     *     or can set the attribute of the class with an object.\n     */\n    constructor(interval) {\n        super(Object.assign({\n            count: 0,\n            handle: null,\n            started: null,\n            running: false,\n            interval: isNumber(interval) ? interval : null,\n        }, isObject(interval) ? interval : null));\n    }\n\n    /**\n     * The `elapsed` attribute.\n     *\n     * @type {Number}\n     */\n    get elapsed() {\n        return !this.lastLoop ? 0 : this.lastLoop - (\n            this.started ? this.started.getTime() : new Date().getTime()\n        );\n    }\n\n    /**\n     * The `isRunning` attribute.\n     *\n     * @type {boolean}\n     */\n    get isRunning() {\n        return this.running === true;\n    }\n\n    /**\n     * The `isStopped` attribute.\n     *\n     * @type {boolean}\n     */\n    get isStopped() {\n        return this.running === false;\n    }\n\n    /**\n     * Resets the timer.\n     *\n     * @param  {(Function|undefined)} fn - The interval callback.\n     * @return {Timer} - The `Timer` instance.\n     */\n    reset(fn) {\n        this.stop(() => {\n            this.count = 0;\n            this.start(() => callback.call(this, fn));\n            this.emit('reset');\n        });\n\n        return this;\n    }\n\n    /**\n     * Starts the timer.\n     *\n     * @param  {Function} fn - The interval callback.\n     * @return {Timer} - The `Timer` instance.\n     */\n    start(fn) {\n        this.started = new Date;\n        this.lastLoop = Date.now();\n        this.running = true;\n        this.emit('start');\n\n        const loop = () => {\n            if(Date.now() - this.lastLoop >= this.interval) {\n                callback.call(this, fn);\n                this.lastLoop = Date.now();\n                this.emit('interval');\n                this.count++;\n            }\n\n            this.handle = window.requestAnimationFrame(loop);\n\n            return this;\n        };\n\n        return loop();\n    }\n\n    /**\n     * Stops the timer.\n     *\n     * @param  {Function} fn - The stop callback.\n     * @return {Timer} - The `Timer` instance.\n     */\n    stop(fn) {\n        if(this.isRunning) {\n            setTimeout(() => {\n                window.cancelAnimationFrame(this.handle);\n\n                this.running = false;\n\n                callback.call(this, fn);\n\n                this.emit('stop');\n            });\n        }\n\n        return this;\n    }\n\n    /**\n     * Define the name of the class.\n     *\n     * @return {string}\n     */\n    static defineName() {\n        return 'Timer';\n    }\n}\n","import Face from '../Components/Face';\n\n/**\n * @classdesc This face is designed to increment and decrement numberic values,\n *     not `Date` objects.\n * @extends Face\n * @param {(FaceValue|object)} value - The `Face` value. If not an instance\n *     of FaceValue, this argument is assumed to be the instance attributes.\n * @param {(object|undefined)} [attributes] - The instance attributes.\n * @memberof Faces\n */\nexport default class Counter extends Face {\n\n    increment(instance, value = 1) {\n        instance.value = this.value.value + value;\n    }\n\n    decrement(instance, value = 1) {\n        instance.value = this.value.value - value;\n    }\n\n    /**\n     * Define the name of the class.\n     *\n     * @return {string}\n     */\n    static defineName() {\n        return 'Counter';\n    }\n}\n","import Face from '../Components/Face';\nimport { noop, round, isNull, isUndefined, isNumber, callback } from '../Helpers/Functions';\n\n/**\n * @classdesc This face is meant to display a clock that shows minutes, and\n *     seconds.\n * @extends Face\n * @param {(FaceValue|object)} value - The `Face` value. If not an instance\n *     of FaceValue, this argument is assumed to be the instance attributes.\n * @param {(object|undefined)} [attributes] - The instance attributes.\n * @memberof Faces\n */\nexport default class MinuteCounter extends Face {\n\n    defaultDataType() {\n        return Date;\n    }\n\n    defaultAttributes() {\n        return {\n            showSeconds: true,\n            showLabels: true\n        };\n    }\n\n    shouldStop(instance) {\n        if(isNull(instance.stopAt) || isUndefined(instance.stopAt)) {\n            return false;\n        }\n\n        if(this.stopAt instanceof Date) {\n            return this.countdown ?\n                this.stopAt.getTime() >= this.value.value.getTime():\n                this.stopAt.getTime() <= this.value.value.getTime();\n        }\n        else if(isNumber(this.stopAt)) {\n            const diff = Math.floor((this.value.value.getTime() - this.originalValue.getTime()) / 1000);\n\n            return this.countdown ?\n                this.stopAt >= diff:\n                this.stopAt <= diff;\n        }\n\n        throw new Error(`the stopAt property must be an instance of Date or Number.`);\n    }\n\n    increment(instance, value = 0) {\n        instance.value = new Date(this.value.value.getTime() + value + (new Date().getTime() - instance.timer.lastLoop));\n    }\n\n    decrement(instance, value = 0) {\n        instance.value = new Date(this.value.value.getTime() - value - (new Date().getTime() - instance.timer.lastLoop));\n    }\n\n    format(instance, value) {\n        const started = instance.timer.isRunning ? instance.timer.started : new Date(Date.now() - 50);\n\n        return [\n            [this.getMinutes(value, started)],\n            this.showSeconds ? [this.getSeconds(value, started)] : null\n        ].filter(noop);\n    }\n\n    getMinutes(a, b) {\n        return round(this.getTotalSeconds(a, b) / 60);\n    }\n\n    getSeconds(a, b) {\n        const totalSeconds = this.getTotalSeconds(a, b);\n\n        return Math.abs(Math.ceil(totalSeconds === 60 ? 0 : totalSeconds % 60));\n    }\n\n    getTotalSeconds(a, b) {\n        return a.getTime() === b.getTime() ? 0 : Math.round((a.getTime() - b.getTime()) / 1000);\n    }\n\n    /**\n     * Define the name of the class.\n     *\n     * @return {string}\n     */\n    static defineName() {\n        return 'MinuteCounter';\n    }\n}\n","import MinuteCounter from './MinuteCounter';\n\n/**\n * @classdesc This face is meant to display a clock that shows\n *     hours, minutes, and seconds.\n * @extends Face\n * @param {(FaceValue|object)} value - The `Face` value. If not an instance\n *     of FaceValue, this argument is assumed to be the instance attributes.\n * @param {(object|undefined)} [attributes] - The instance attributes.\n * @memberof Faces\n */\nexport default class HourCounter extends MinuteCounter {\n\n    format(instance, value) {\n        const now = !instance.timer.started ? new Date : value;\n        const originalValue = instance.originalValue || value;\n        const a = !this.countdown ? now : originalValue;\n        const b = !this.countdown ? originalValue : now;\n\n        const data = [\n            [this.getHours(a, b)],\n            [this.getMinutes(a, b)]\n        ];\n\n        if(this.showSeconds) {\n            data.push([this.getSeconds(a, b)]);\n        }\n\n        return data;\n    }\n\n    getMinutes(a, b) {\n        return Math.abs(super.getMinutes(a, b) % 60);\n    }\n\n    getHours(a, b) {\n        return Math.floor(this.getTotalSeconds(a, b) / 60 / 60);\n    }\n\n    /**\n     * Define the name of the class.\n     *\n     * @return {string}\n     */\n    static defineName() {\n        return 'HourCounter';\n    }\n}\n","import HourCounter from './HourCounter';\n\n/**\n * @classdesc This face is meant to display a clock that shows days, hours,\n *     minutes, and seconds.\n * @extends HourCounter\n * @param {(FaceValue|object)} value - The `Face` value. If not an instance\n *     of FaceValue, this argument is assumed to be the instance attributes.\n * @param {(object|undefined)} [attributes] - The instance attributes.\n * @memberof Faces\n */\nexport default class DayCounter extends HourCounter {\n\n    format(instance, value) {\n        const now = !instance.started ? new Date : value;\n        const originalValue = instance.originalValue || value;\n        const a = !this.countdown ? now : originalValue;\n        const b = !this.countdown ? originalValue : now;\n\n        const data = [\n            [this.getDays(a, b)],\n            [this.getHours(a, b)],\n            [this.getMinutes(a, b)]\n        ];\n\n        if(this.showSeconds) {\n            data.push([this.getSeconds(a, b)]);\n        }\n\n        return data;\n    }\n\n    getDays(a, b) {\n        return Math.floor(this.getTotalSeconds(a, b) / 60 / 60 / 24);\n    }\n\n    getHours(a, b) {\n        return Math.abs(super.getHours(a, b) % 24);\n    }\n\n    /**\n     * Define the name of the class.\n     *\n     * @return {string}\n     */\n    static defineName() {\n        return 'DayCounter';\n    }\n}\n","import Face from '../Components/Face';\nimport { callback } from '../Helpers/Functions';\n\n/**\n * @classdesc This face shows the current time in twenty-four hour format.\n * @extends Face\n * @param {(FaceValue|object)} value - The `Face` value. If not an instance\n *     of FaceValue, this argument is assumed to be the instance attributes.\n * @param {(object|undefined)} [attributes] - The instance attributes.\n * @memberof Faces\n */\nexport default class TwentyFourHourClock extends Face {\n\n    defaultDataType() {\n        return Date;\n    }\n\n    defaultValue() {\n        return new Date;\n    }\n\n    defaultAttributes() {\n        return {\n            showSeconds: true,\n            showLabels: false\n        };\n    }\n\n    format(instance, value) {\n        if(!value) {\n            value = new Date;\n        }\n\n        const groups = [\n            [value.getHours()],\n            [value.getMinutes()]\n        ];\n\n        if(this.showSeconds) {\n            groups.push([value.getSeconds()]);\n        }\n\n        return groups;\n    }\n\n    increment(instance, offset = 0) {\n        instance.value = new Date(this.value.value.getTime() + offset + (new Date().getTime() - instance.timer.lastLoop));\n    }\n\n    decrement(instance, offset = 0) {\n        instance.value = new Date(this.value.value.getTime() - offset - (new Date().getTime() - instance.timer.lastLoop));\n    }\n\n    /**\n     * Define the name of the class.\n     *\n     * @return {string}\n     */\n    static defineName() {\n        return 'TwentyFourHourClock';\n    }\n}\n","import TwentyFourHourClock from './TwentyFourHourClock';\n\n/**\n * @classdesc This face shows the current time in twelve hour format, with AM\n *     and PM.\n * @extends Face\n * @param {(FaceValue|object)} value - The `Face` value. If not an instance\n *     of FaceValue, this argument is assumed to be the instance attributes.\n * @param {(object|undefined)} [attributes] - The instance attributes.\n * @memberof Faces\n */\nexport default class TwelveHourClock extends TwentyFourHourClock {\n\n    defaultAttributes() {\n        return {\n            showLabels: false,\n            showSeconds: true,\n            showMeridium: true\n        };\n    }\n\n    format(instance, value) {\n        if(!value) {\n            value = new Date;\n        }\n\n        const hours = value.getHours();\n\t\tconst groups = [\n\t\t\thours > 12 ? hours - 12 : (hours === 0 ? 12 : hours),\n\t\t\tvalue.getMinutes()\n\t\t];\n\n        this.meridium = hours > 12 ? 'pm' : 'am';\n\n\t\tif(this.showSeconds) {\n\t\t\tgroups.push(value.getSeconds());\n\t\t}\n\n\t\treturn groups;\n    }\n\n    /**\n     * Define the name of the class.\n     *\n     * @return {string}\n     */\n    static defineName() {\n        return 'TwelveHourClock';\n    }\n}\n","import DayCounter from './DayCounter';\n\n/**\n * @classdesc This face is meant to display a clock that shows weeks, days,\n *     hours, minutes, and seconds.\n * @extends Face\n * @param {(FaceValue|object)} value - The `Face` value. If not an instance\n *     of FaceValue, this argument is assumed to be the instance attributes.\n * @param {(object|undefined)} [attributes] - The instance attributes.\n * @memberof Faces\n */\nexport default class WeekCounter extends DayCounter {\n\n    format(instance, value) {\n        const now = !instance.timer.started ? new Date : value;\n        const originalValue = instance.originalValue || value;\n        const a = !this.countdown ? now : originalValue;\n        const b = !this.countdown ? originalValue : now;\n\n        const data = [\n            [this.getWeeks(a, b)],\n            [this.getDays(a, b)],\n            [this.getHours(a, b)],\n            [this.getMinutes(a, b)]\n        ];\n\n        if(this.showSeconds) {\n            data.push([this.getSeconds(a, b)]);\n        }\n\n        return data;\n    }\n\n    getWeeks(a, b) {\n        return Math.floor(this.getTotalSeconds(a, b) / 60 / 60 / 24 / 7);\n    }\n\n    getDays(a, b) {\n        return Math.abs(super.getDays(a, b) % 7);\n    }\n\n    /**\n     * Define the name of the class.\n     *\n     * @return {string}\n     */\n    static defineName() {\n        return 'WeekCounter';\n    }\n}\n","import WeekCounter from './WeekCounter';\n\n/**\n * @classdesc This face is meant to display a clock that shows years, weeks,\n *     days, hours, minutes, and seconds.\n * @extends Face\n * @param {(FaceValue|object)} value - The `Face` value. If not an instance\n *     of FaceValue, this argument is assumed to be the instance attributes.\n * @param {(object|undefined)} [attributes] - The instance attributes.\n * @memberof Faces\n */\nexport default class YearCounter extends WeekCounter {\n\n    format(instance, value) {\n        const now = !instance.timer.started ? new Date : value;\n        const originalValue = instance.originalValue || value;\n        const a = !this.countdown ? now : originalValue;\n        const b = !this.countdown ? originalValue : now;\n\n        const data = [\n            [this.getYears(a, b)],\n            [this.getWeeks(a, b)],\n            [this.getDays(a, b)],\n            [this.getHours(a, b)],\n            [this.getMinutes(a, b)]\n        ];\n\n        if(this.showSeconds) {\n            data.push([this.getSeconds(a, b)]);\n        }\n\n        return data;\n    }\n\n    getYears(a, b) {\n        return Math.floor(Math.max(0, this.getTotalSeconds(a, b) / 60 / 60 / 24 / 7 / 52));\n    }\n\n    getWeeks(a, b) {\n        return Math.abs(super.getWeeks(a, b) % 52);\n    }\n\n    /**\n     * Define the name of the class.\n     *\n     * @return {string}\n     */\n    static defineName() {\n        return 'YearCounter';\n    }\n}\n","import { next } from '../../Helpers/Value';\nimport { appendChildren } from '../../Helpers/Template';\n\nfunction child(el, index) {\n    return el ? (el.childNodes ? el.childNodes[index] : el[index]) : null;\n}\n\nfunction char(el) {\n    return el ? el.querySelector('.flip-clock-list-item:first-child .top').innerHTML : null;\n}\n\nexport default function(el, instance) {\n    const parts = instance.value.digits.map((group, x) => {\n        const groupEl = child(instance.el ? instance.el.querySelectorAll('.flip-clock-group') : null, x);\n\n        const lists = group.map((value, y) => {\n            const listEl = child(groupEl ? groupEl.querySelectorAll('.flip-clock-list') : null, y);\n            const listValue = char(listEl);\n\n            return instance.createList(value, {\n                domValue: listValue,\n                countdown: instance.countdown,\n                animationRate: instance.face.animationRate || instance.face.delay\n            });\n        });\n\n        return instance.createGroup(lists);\n    });\n\n    const nodes = parts.map(group => {\n        return group.render();\n    });\n\n    appendChildren(el, nodes);\n}\n","export default function(el, instance) {\n    instance.createDivider().mount(el, el.childNodes[1]);\n\n    if(instance.face.showSeconds) {\n        instance.createDivider().mount(el, el.childNodes[3]);\n    }\n    \n    if(instance.face.showLabels) {\n        instance.createLabel('hours').mount(el.childNodes[0]);\n        instance.createLabel('minutes').mount(el.childNodes[2]);\n\n        if(instance.face.showSeconds) {\n            instance.createLabel('seconds').mount(el.childNodes[4]);\n        }\n    }\n\n}\n","import { Counter } from '../Faces';\nimport { Original } from '../Themes';\nimport { English } from '../Languages';\n\n/**\n * @alias DefaultValues\n * @type {object}\n * @memberof module:Config/DefaultValues\n */\nexport default {\n    face: Counter,\n    theme: Original,\n    language: English\n};\n","import Divider from './Divider';\nimport FlipClock from './FlipClock';\nimport Group from './Group';\nimport Label from './Label';\nimport List from './List';\nimport ListItem from './ListItem';\nimport * as faces from './Faces';\n\nexport default {\n    Divider,\n    FlipClock,\n    Group,\n    Label,\n    List,\n    ListItem,\n    faces\n};\n","import { appendChildren, createElement } from '../../Helpers/Template';\n\nexport default function(el, instance) {\n    appendChildren(el, [\n        createElement('div', {class: 'flip-clock-dot top'}),\n        createElement('div', {class: 'flip-clock-dot bottom'})\n    ]);\n}\n","import { createElement, appendChildren } from '../../Helpers/Template';\n\nexport default function(el, instance) {\n    const items = instance.items.map(item => {\n        return item.render();\n    });\n\n    appendChildren(el, items);\n}\n","import { createElement } from '../../Helpers/Template';\n\nexport default function(el, instance) {\n    el.innerHTML = instance.t(instance.label);\n}\n","import { next, prev } from '../../Helpers/Value';\nimport ListItem from '../../Components/ListItem';\nimport { createElement, appendChildren } from '../../Helpers/Template';\n\nexport default function(el, instance) {\n    const beforeValue = instance.domValue || (\n        !instance.countdown ? prev(instance.value) : next(instance.value)\n    );\n\n    if( instance.domValue && instance.domValue !== instance.value) {\n        el.classList.add('flip');\n    }\n\n    el.style.animationDelay = `${instance.animationRate / 2}ms`;\n    el.style.animationDuration = `${instance.animationRate / 2}ms`;\n\n    instance.items = [\n        instance.createListItem(instance.value, {\n            active: true\n        }),\n        instance.createListItem(beforeValue, {\n            active: false\n        })\n    ];\n\n    appendChildren(el, instance.items.map(item => item.render()));\n}\n","import { createElement, appendChildren } from '../../Helpers/Template';\n\nexport default function(el, instance) {\n    const className = instance.active === true ? 'active' : (\n        instance.active === false ? 'before' : null\n    );\n\n    el.classList.add(className);\n\n    appendChildren(el, [\n        createElement('div', [\n            createElement('div', instance.value, {class: 'top'}),\n            createElement('div', instance.value, {class: 'bottom'})\n        ], {class: 'flip-clock-list-item-inner'})\n    ]);\n}\n","export default function(el, instance) {\n    instance.createDivider().mount(el, el.childNodes[1]);\n    instance.createDivider().mount(el, el.childNodes[3]);\n\n    if(instance.face.showSeconds) {\n        instance.createDivider().mount(el, el.childNodes[5]);\n    }\n\n    if(instance.face.showLabels) {\n        instance.createLabel('days').mount(el.childNodes[0]);\n        instance.createLabel('hours').mount(el.childNodes[2]);\n        instance.createLabel('minutes').mount(el.childNodes[4]);\n\n        if(instance.face.showSeconds) {\n            instance.createLabel('seconds').mount(el.childNodes[6]);\n        }\n    }\n}\n","export default function(el, instance) {\n    instance.createDivider().mount(el, el.childNodes[1]);\n\n    if(instance.face.showSeconds) {\n        instance.createDivider().mount(el, el.childNodes[3]);\n    }\n    \n    if(instance.face.showLabels) {\n        instance.createLabel('hours').mount(el.childNodes[0]);\n        instance.createLabel('minutes').mount(el.childNodes[2]);\n\n        if(instance.face.showSeconds) {\n            instance.createLabel('seconds').mount(el.childNodes[4]);\n        }\n    }\n}\n","export default function(el, instance) {\n    if(instance.face.showSeconds) {\n        instance.createDivider().mount(el, el.childNodes[1]);\n    }\n\n    if(instance.face.showLabels) {\n        instance.createLabel('minutes').mount(el.childNodes[0]);\n\n        if(instance.face.showSeconds) {\n            instance.createLabel('seconds').mount(el.childNodes[2]);\n        }\n    }\n}\n","import TwentyFourHourClock from './TwentyFourHourClock';\n\nexport default function(el, instance) {\n    TwentyFourHourClock(el, instance);\n\n    if(instance.face.showMeridium && instance.face.meridium) {\n        const label = instance.createLabel(instance.face.meridium);\n        const parent = el.childNodes[el.childNodes.length - 1];\n\n        label.mount(parent).classList.add('flip-clock-meridium');\n    }\n}\n","export default function(el, instance) {\n    instance.createDivider().mount(el, el.childNodes[1]);\n    instance.createDivider().mount(el, el.childNodes[3]);\n    instance.createDivider().mount(el, el.childNodes[5]);\n\n    if(instance.face.showSeconds) {\n        instance.createDivider().mount(el, el.childNodes[7]);\n    }\n\n    if(instance.face.showLabels) {\n        instance.createLabel('weeks').mount(el.childNodes[0]);\n        instance.createLabel('days').mount(el.childNodes[2]);\n        instance.createLabel('hours').mount(el.childNodes[4]);\n        instance.createLabel('minutes').mount(el.childNodes[6]);\n\n        if(instance.face.showSeconds) {\n            instance.createLabel('seconds').mount(el.childNodes[8]);\n        }\n    }\n}\n","export default function(el, instance) {\n    instance.createDivider().mount(el, el.childNodes[1]);\n    instance.createDivider().mount(el, el.childNodes[3]);\n    instance.createDivider().mount(el, el.childNodes[5]);\n    instance.createDivider().mount(el, el.childNodes[7]);\n\n    if(instance.face.showSeconds) {\n        instance.createDivider().mount(el, el.childNodes[9]);\n    }\n\n    if(instance.face.showLabels) {\n        instance.createLabel('years').mount(el.childNodes[0]);\n        instance.createLabel('weeks').mount(el.childNodes[2]);\n        instance.createLabel('days').mount(el.childNodes[4]);\n        instance.createLabel('hours').mount(el.childNodes[6]);\n        instance.createLabel('minutes').mount(el.childNodes[8]);\n\n        if(instance.face.showSeconds) {\n            instance.createLabel('seconds').mount(el.childNodes[10]);\n        }\n    }\n}\n","import FlipClock from \"flipclock\";\n\nconst el = document.querySelector('.js-clock');\n\nconst clock = new FlipClock(el, new Date('2019-11-15'), {\n    clockFace: 'DayCounter',\n    countdown: true\n});\n\nclock.face = 'DayCounter'\n\nconsole.log(clock)\n"]}